
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';


/**
 * Model Userlogin
 */

export type Userlogin = {
  id: number
  userName: string
  password: string
  role: ERole
  empId: number
}

/**
 * Model Employee
 */

export type Employee = {
  id: number
  firstName: string
  lastName: string
  email: string
  mobile: string
  roleDescription: string
  valid: boolean
  depId: number
}

/**
 * Model Department
 */

export type Department = {
  id: number
  name: string
  manager: string
}

/**
 * Model Leave
 */

export type Leave = {
  id: number
  employeeId: number
  leaveType: LeaveType
  startDate: Date
  endDate: Date
  leaveDescription: string
  valid: boolean
  leaveTimeStamp: Date
  leaveStatus: Status
  statusTimeStamp: Date
  totalLeavesLeft: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ERole: {
  HR: 'HR',
  MANAGER: 'MANAGER',
  EMPLOYEE: 'EMPLOYEE'
};

export type ERole = (typeof ERole)[keyof typeof ERole]


export const LeaveType: {
  SICK: 'SICK',
  PAID: 'PAID',
  COMPLIMENTARY: 'COMPLIMENTARY',
  LOP: 'LOP',
  EMERGENCY: 'EMERGENCY',
  OTHERS: 'OTHERS'
};

export type LeaveType = (typeof LeaveType)[keyof typeof LeaveType]


export const Status: {
  PENDING: 'PENDING',
  FIRST_APPROVAL: 'FIRST_APPROVAL',
  SECOND_APPROVAL: 'SECOND_APPROVAL',
  REJECTED: 'REJECTED'
};

export type Status = (typeof Status)[keyof typeof Status]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Userlogins
 * const userlogins = await prisma.userlogin.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Userlogins
   * const userlogins = await prisma.userlogin.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.userlogin`: Exposes CRUD operations for the **Userlogin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Userlogins
    * const userlogins = await prisma.userlogin.findMany()
    * ```
    */
  get userlogin(): Prisma.UserloginDelegate<GlobalReject>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<GlobalReject>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<GlobalReject>;

  /**
   * `prisma.leave`: Exposes CRUD operations for the **Leave** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leaves
    * const leaves = await prisma.leave.findMany()
    * ```
    */
  get leave(): Prisma.LeaveDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.16.1
   * Query Engine version: 8b74ad57aaf2cc6c155f382a18a8e3ba95aceb03
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  /**
   * Allows creating `select` or `include` outside of the main statement
   * From https://github.com/prisma/prisma/issues/3372#issuecomment-762296484
   */

  type Cast<A1, A2> = A1 extends A2 ? A1 : A2;

  /**
   * `Exact` forces a type to comply by another type. It will need to be a subset
   * and must have exactly the same properties, no more, no less.
   */
  type Exact<A, W> = A & Cast<{
    [K in keyof A]: K extends keyof W ? A[K] : never
  }, W>;

  type Narrow<A, W = unknown> =
      A & {[K in keyof A]: NarrowAt<A, W, K>};

  type NarrowAt<A, W, K extends keyof A, AK = A[K], WK = Att<W, K>> =
      WK extends Widen<infer T> ? T :
      AK extends Narrowable ? AK & WK :
      Narrow<AK, WK>;

  type Att<O, K> = K extends keyof O ? O[K] : unknown;

  type Widen<A> = {[type]: A};

  type Narrowable =
  | string
  | number
  | bigint
  | boolean
  | [];

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<Narrow<S, V>, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Userlogin: 'Userlogin',
    Employee: 'Employee',
    Department: 'Department',
    Leave: 'Leave'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model Userlogin
   */


  export type AggregateUserlogin = {
    count: UserloginCountAggregateOutputType | null
    avg: UserloginAvgAggregateOutputType | null
    sum: UserloginSumAggregateOutputType | null
    min: UserloginMinAggregateOutputType | null
    max: UserloginMaxAggregateOutputType | null
  }

  export type UserloginAvgAggregateOutputType = {
    id: number
    empId: number
  }

  export type UserloginSumAggregateOutputType = {
    id: number
    empId: number
  }

  export type UserloginMinAggregateOutputType = {
    id: number
    userName: string | null
    password: string | null
    role: ERole | null
    empId: number
  }

  export type UserloginMaxAggregateOutputType = {
    id: number
    userName: string | null
    password: string | null
    role: ERole | null
    empId: number
  }

  export type UserloginCountAggregateOutputType = {
    id: number
    userName: number | null
    password: number | null
    role: number | null
    empId: number
    _all: number
  }


  export type UserloginAvgAggregateInputType = {
    id?: true
    empId?: true
  }

  export type UserloginSumAggregateInputType = {
    id?: true
    empId?: true
  }

  export type UserloginMinAggregateInputType = {
    id?: true
    userName?: true
    password?: true
    role?: true
    empId?: true
  }

  export type UserloginMaxAggregateInputType = {
    id?: true
    userName?: true
    password?: true
    role?: true
    empId?: true
  }

  export type UserloginCountAggregateInputType = {
    id?: true
    userName?: true
    password?: true
    role?: true
    empId?: true
    _all?: true
  }

  export type UserloginAggregateArgs = {
    /**
     * Filter which Userlogin to aggregate.
    **/
    where?: UserloginWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Userlogins to fetch.
    **/
    orderBy?: Enumerable<UserloginOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserloginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Userlogins from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Userlogins.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Userlogins
    **/
    count?: true | UserloginCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserloginAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserloginSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserloginMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserloginMaxAggregateInputType
  }

  export type GetUserloginAggregateType<T extends UserloginAggregateArgs> = {
    [P in keyof T & keyof AggregateUserlogin]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserlogin[P]>
      : GetScalarType<T[P], AggregateUserlogin[P]>
  }



  export type UserloginSelect = {
    id?: boolean
    userName?: boolean
    password?: boolean
    role?: boolean
    empId?: boolean
    emp?: boolean | EmployeeArgs
  }

  export type UserloginInclude = {
    emp?: boolean | EmployeeArgs
  }

  export type UserloginGetPayload<
    S extends boolean | null | undefined | UserloginArgs,
    U = keyof S
      > = S extends true
        ? Userlogin
    : S extends undefined
    ? never
    : S extends UserloginArgs | UserloginFindManyArgs
    ?'include' extends U
    ? Userlogin  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'emp'
        ? EmployeeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Userlogin ?Userlogin [P]
  : 
          P extends 'emp'
        ? EmployeeGetPayload<S['select'][P]> : never
  } 
    : Userlogin
  : Userlogin


  type UserloginCountArgs = Merge<
    Omit<UserloginFindManyArgs, 'select' | 'include'> & {
      select?: UserloginCountAggregateInputType | true
    }
  >

  export interface UserloginDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Userlogin that matches the filter.
     * @param {UserloginFindUniqueArgs} args - Arguments to find a Userlogin
     * @example
     * // Get one Userlogin
     * const userlogin = await prisma.userlogin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserloginFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserloginFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Userlogin'> extends True ? CheckSelect<T, Prisma__UserloginClient<Userlogin>, Prisma__UserloginClient<UserloginGetPayload<T>>> : CheckSelect<T, Prisma__UserloginClient<Userlogin | null >, Prisma__UserloginClient<UserloginGetPayload<T> | null >>

    /**
     * Find the first Userlogin that matches the filter.
     * @param {UserloginFindFirstArgs} args - Arguments to find a Userlogin
     * @example
     * // Get one Userlogin
     * const userlogin = await prisma.userlogin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserloginFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserloginFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Userlogin'> extends True ? CheckSelect<T, Prisma__UserloginClient<Userlogin>, Prisma__UserloginClient<UserloginGetPayload<T>>> : CheckSelect<T, Prisma__UserloginClient<Userlogin | null >, Prisma__UserloginClient<UserloginGetPayload<T> | null >>

    /**
     * Find zero or more Userlogins that matches the filter.
     * @param {UserloginFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Userlogins
     * const userlogins = await prisma.userlogin.findMany()
     * 
     * // Get first 10 Userlogins
     * const userlogins = await prisma.userlogin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userloginWithIdOnly = await prisma.userlogin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserloginFindManyArgs>(
      args?: SelectSubset<T, UserloginFindManyArgs>
    ): CheckSelect<T, Promise<Array<Userlogin>>, Promise<Array<UserloginGetPayload<T>>>>

    /**
     * Create a Userlogin.
     * @param {UserloginCreateArgs} args - Arguments to create a Userlogin.
     * @example
     * // Create one Userlogin
     * const Userlogin = await prisma.userlogin.create({
     *   data: {
     *     // ... data to create a Userlogin
     *   }
     * })
     * 
    **/
    create<T extends UserloginCreateArgs>(
      args: SelectSubset<T, UserloginCreateArgs>
    ): CheckSelect<T, Prisma__UserloginClient<Userlogin>, Prisma__UserloginClient<UserloginGetPayload<T>>>

    /**
     * Delete a Userlogin.
     * @param {UserloginDeleteArgs} args - Arguments to delete one Userlogin.
     * @example
     * // Delete one Userlogin
     * const Userlogin = await prisma.userlogin.delete({
     *   where: {
     *     // ... filter to delete one Userlogin
     *   }
     * })
     * 
    **/
    delete<T extends UserloginDeleteArgs>(
      args: SelectSubset<T, UserloginDeleteArgs>
    ): CheckSelect<T, Prisma__UserloginClient<Userlogin>, Prisma__UserloginClient<UserloginGetPayload<T>>>

    /**
     * Update one Userlogin.
     * @param {UserloginUpdateArgs} args - Arguments to update one Userlogin.
     * @example
     * // Update one Userlogin
     * const userlogin = await prisma.userlogin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserloginUpdateArgs>(
      args: SelectSubset<T, UserloginUpdateArgs>
    ): CheckSelect<T, Prisma__UserloginClient<Userlogin>, Prisma__UserloginClient<UserloginGetPayload<T>>>

    /**
     * Delete zero or more Userlogins.
     * @param {UserloginDeleteManyArgs} args - Arguments to filter Userlogins to delete.
     * @example
     * // Delete a few Userlogins
     * const { count } = await prisma.userlogin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserloginDeleteManyArgs>(
      args?: SelectSubset<T, UserloginDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Userlogins.
     * @param {UserloginUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Userlogins
     * const userlogin = await prisma.userlogin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserloginUpdateManyArgs>(
      args: SelectSubset<T, UserloginUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Userlogin.
     * @param {UserloginUpsertArgs} args - Arguments to update or create a Userlogin.
     * @example
     * // Update or create a Userlogin
     * const userlogin = await prisma.userlogin.upsert({
     *   create: {
     *     // ... data to create a Userlogin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Userlogin we want to update
     *   }
     * })
    **/
    upsert<T extends UserloginUpsertArgs>(
      args: SelectSubset<T, UserloginUpsertArgs>
    ): CheckSelect<T, Prisma__UserloginClient<Userlogin>, Prisma__UserloginClient<UserloginGetPayload<T>>>

    /**
     * Count the number of Userlogins.
     * @param {UserloginCountArgs} args - Arguments to filter Userlogins to count.
     * @example
     * // Count the number of Userlogins
     * const count = await prisma.userlogin.count({
     *   where: {
     *     // ... the filter for the Userlogins we want to count
     *   }
     * })
    **/
    count<T extends UserloginCountArgs>(
      args?: Subset<T, UserloginCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserloginCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Userlogin.
     * @param {UserloginAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserloginAggregateArgs>(args: Subset<T, UserloginAggregateArgs>): Promise<GetUserloginAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Userlogin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserloginClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    emp<T extends EmployeeArgs = {}>(args?: Subset<T, EmployeeArgs>): CheckSelect<T, Prisma__EmployeeClient<Employee | null >, Prisma__EmployeeClient<EmployeeGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Userlogin findUnique
   */
  export type UserloginFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Userlogin
    **/
    select?: UserloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserloginInclude | null
    /**
     * Throw an Error if a Userlogin can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Userlogin to fetch.
    **/
    where: UserloginWhereUniqueInput
  }


  /**
   * Userlogin findFirst
   */
  export type UserloginFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Userlogin
    **/
    select?: UserloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserloginInclude | null
    /**
     * Throw an Error if a Userlogin can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Userlogin to fetch.
    **/
    where?: UserloginWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Userlogins to fetch.
    **/
    orderBy?: Enumerable<UserloginOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Userlogins.
    **/
    cursor?: UserloginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Userlogins from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Userlogins.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Userlogins.
    **/
    distinct?: Enumerable<UserloginScalarFieldEnum>
  }


  /**
   * Userlogin findMany
   */
  export type UserloginFindManyArgs = {
    /**
     * Select specific fields to fetch from the Userlogin
    **/
    select?: UserloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserloginInclude | null
    /**
     * Filter, which Userlogins to fetch.
    **/
    where?: UserloginWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Userlogins to fetch.
    **/
    orderBy?: Enumerable<UserloginOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Userlogins.
    **/
    cursor?: UserloginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Userlogins from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Userlogins.
    **/
    skip?: number
    distinct?: Enumerable<UserloginScalarFieldEnum>
  }


  /**
   * Userlogin create
   */
  export type UserloginCreateArgs = {
    /**
     * Select specific fields to fetch from the Userlogin
    **/
    select?: UserloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserloginInclude | null
    /**
     * The data needed to create a Userlogin.
    **/
    data: XOR<UserloginUncheckedCreateInput, UserloginCreateInput>
  }


  /**
   * Userlogin update
   */
  export type UserloginUpdateArgs = {
    /**
     * Select specific fields to fetch from the Userlogin
    **/
    select?: UserloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserloginInclude | null
    /**
     * The data needed to update a Userlogin.
    **/
    data: XOR<UserloginUncheckedUpdateInput, UserloginUpdateInput>
    /**
     * Choose, which Userlogin to update.
    **/
    where: UserloginWhereUniqueInput
  }


  /**
   * Userlogin updateMany
   */
  export type UserloginUpdateManyArgs = {
    data: XOR<UserloginUncheckedUpdateManyInput, UserloginUpdateManyMutationInput>
    where?: UserloginWhereInput
  }


  /**
   * Userlogin upsert
   */
  export type UserloginUpsertArgs = {
    /**
     * Select specific fields to fetch from the Userlogin
    **/
    select?: UserloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserloginInclude | null
    /**
     * The filter to search for the Userlogin to update in case it exists.
    **/
    where: UserloginWhereUniqueInput
    /**
     * In case the Userlogin found by the `where` argument doesn't exist, create a new Userlogin with this data.
    **/
    create: XOR<UserloginUncheckedCreateInput, UserloginCreateInput>
    /**
     * In case the Userlogin was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserloginUncheckedUpdateInput, UserloginUpdateInput>
  }


  /**
   * Userlogin delete
   */
  export type UserloginDeleteArgs = {
    /**
     * Select specific fields to fetch from the Userlogin
    **/
    select?: UserloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserloginInclude | null
    /**
     * Filter which Userlogin to delete.
    **/
    where: UserloginWhereUniqueInput
  }


  /**
   * Userlogin deleteMany
   */
  export type UserloginDeleteManyArgs = {
    where?: UserloginWhereInput
  }


  /**
   * Userlogin without action
   */
  export type UserloginArgs = {
    /**
     * Select specific fields to fetch from the Userlogin
    **/
    select?: UserloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserloginInclude | null
  }



  /**
   * Model Employee
   */


  export type AggregateEmployee = {
    count: EmployeeCountAggregateOutputType | null
    avg: EmployeeAvgAggregateOutputType | null
    sum: EmployeeSumAggregateOutputType | null
    min: EmployeeMinAggregateOutputType | null
    max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    id: number
    depId: number
  }

  export type EmployeeSumAggregateOutputType = {
    id: number
    depId: number
  }

  export type EmployeeMinAggregateOutputType = {
    id: number
    firstName: string | null
    lastName: string | null
    email: string | null
    mobile: string | null
    roleDescription: string | null
    valid: boolean | null
    depId: number
  }

  export type EmployeeMaxAggregateOutputType = {
    id: number
    firstName: string | null
    lastName: string | null
    email: string | null
    mobile: string | null
    roleDescription: string | null
    valid: boolean | null
    depId: number
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    firstName: number | null
    lastName: number | null
    email: number | null
    mobile: number | null
    roleDescription: number | null
    valid: number | null
    depId: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    id?: true
    depId?: true
  }

  export type EmployeeSumAggregateInputType = {
    id?: true
    depId?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    mobile?: true
    roleDescription?: true
    valid?: true
    depId?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    mobile?: true
    roleDescription?: true
    valid?: true
    depId?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    mobile?: true
    roleDescription?: true
    valid?: true
    depId?: true
    _all?: true
  }

  export type EmployeeAggregateArgs = {
    /**
     * Filter which Employee to aggregate.
    **/
    where?: EmployeeWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Employees to fetch.
    **/
    orderBy?: Enumerable<EmployeeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
    [P in keyof T & keyof AggregateEmployee]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }



  export type EmployeeSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    mobile?: boolean
    roleDescription?: boolean
    valid?: boolean
    depId?: boolean
    dept?: boolean | DepartmentArgs
    leaveHistory?: boolean | LeaveFindManyArgs
    Userlogin?: boolean | UserloginFindManyArgs
  }

  export type EmployeeInclude = {
    dept?: boolean | DepartmentArgs
    leaveHistory?: boolean | LeaveFindManyArgs
    Userlogin?: boolean | UserloginFindManyArgs
  }

  export type EmployeeGetPayload<
    S extends boolean | null | undefined | EmployeeArgs,
    U = keyof S
      > = S extends true
        ? Employee
    : S extends undefined
    ? never
    : S extends EmployeeArgs | EmployeeFindManyArgs
    ?'include' extends U
    ? Employee  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'dept'
        ? DepartmentGetPayload<S['include'][P]> :
        P extends 'leaveHistory'
        ? Array < LeaveGetPayload<S['include'][P]>>  :
        P extends 'Userlogin'
        ? Array < UserloginGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Employee ?Employee [P]
  : 
          P extends 'dept'
        ? DepartmentGetPayload<S['select'][P]> :
        P extends 'leaveHistory'
        ? Array < LeaveGetPayload<S['select'][P]>>  :
        P extends 'Userlogin'
        ? Array < UserloginGetPayload<S['select'][P]>>  : never
  } 
    : Employee
  : Employee


  type EmployeeCountArgs = Merge<
    Omit<EmployeeFindManyArgs, 'select' | 'include'> & {
      select?: EmployeeCountAggregateInputType | true
    }
  >

  export interface EmployeeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmployeeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EmployeeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Employee'> extends True ? CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>> : CheckSelect<T, Prisma__EmployeeClient<Employee | null >, Prisma__EmployeeClient<EmployeeGetPayload<T> | null >>

    /**
     * Find the first Employee that matches the filter.
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmployeeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EmployeeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Employee'> extends True ? CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>> : CheckSelect<T, Prisma__EmployeeClient<Employee | null >, Prisma__EmployeeClient<EmployeeGetPayload<T> | null >>

    /**
     * Find zero or more Employees that matches the filter.
     * @param {EmployeeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmployeeFindManyArgs>(
      args?: SelectSubset<T, EmployeeFindManyArgs>
    ): CheckSelect<T, Promise<Array<Employee>>, Promise<Array<EmployeeGetPayload<T>>>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
    **/
    create<T extends EmployeeCreateArgs>(
      args: SelectSubset<T, EmployeeCreateArgs>
    ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
    **/
    delete<T extends EmployeeDeleteArgs>(
      args: SelectSubset<T, EmployeeDeleteArgs>
    ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmployeeUpdateArgs>(
      args: SelectSubset<T, EmployeeUpdateArgs>
    ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmployeeDeleteManyArgs>(
      args?: SelectSubset<T, EmployeeDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Employees.
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmployeeUpdateManyArgs>(
      args: SelectSubset<T, EmployeeUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
    **/
    upsert<T extends EmployeeUpsertArgs>(
      args: SelectSubset<T, EmployeeUpsertArgs>
    ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>

    /**
     * Count the number of Employees.
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Promise<GetEmployeeAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EmployeeClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    dept<T extends DepartmentArgs = {}>(args?: Subset<T, DepartmentArgs>): CheckSelect<T, Prisma__DepartmentClient<Department | null >, Prisma__DepartmentClient<DepartmentGetPayload<T> | null >>;

    leaveHistory<T extends LeaveFindManyArgs = {}>(args?: Subset<T, LeaveFindManyArgs>): CheckSelect<T, Promise<Array<Leave>>, Promise<Array<LeaveGetPayload<T>>>>;

    Userlogin<T extends UserloginFindManyArgs = {}>(args?: Subset<T, UserloginFindManyArgs>): CheckSelect<T, Promise<Array<Userlogin>>, Promise<Array<UserloginGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
    /**
     * Throw an Error if a Employee can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Employee to fetch.
    **/
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
    /**
     * Throw an Error if a Employee can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Employee to fetch.
    **/
    where?: EmployeeWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Employees to fetch.
    **/
    orderBy?: Enumerable<EmployeeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
    **/
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Employees.
    **/
    distinct?: Enumerable<EmployeeScalarFieldEnum>
  }


  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
    /**
     * Filter, which Employees to fetch.
    **/
    where?: EmployeeWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Employees to fetch.
    **/
    orderBy?: Enumerable<EmployeeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
    **/
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
    **/
    skip?: number
    distinct?: Enumerable<EmployeeScalarFieldEnum>
  }


  /**
   * Employee create
   */
  export type EmployeeCreateArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
    /**
     * The data needed to create a Employee.
    **/
    data: XOR<EmployeeUncheckedCreateInput, EmployeeCreateInput>
  }


  /**
   * Employee update
   */
  export type EmployeeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
    /**
     * The data needed to update a Employee.
    **/
    data: XOR<EmployeeUncheckedUpdateInput, EmployeeUpdateInput>
    /**
     * Choose, which Employee to update.
    **/
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs = {
    data: XOR<EmployeeUncheckedUpdateManyInput, EmployeeUpdateManyMutationInput>
    where?: EmployeeWhereInput
  }


  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
    /**
     * The filter to search for the Employee to update in case it exists.
    **/
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
    **/
    create: XOR<EmployeeUncheckedCreateInput, EmployeeCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<EmployeeUncheckedUpdateInput, EmployeeUpdateInput>
  }


  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
    /**
     * Filter which Employee to delete.
    **/
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs = {
    where?: EmployeeWhereInput
  }


  /**
   * Employee without action
   */
  export type EmployeeArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
  }



  /**
   * Model Department
   */


  export type AggregateDepartment = {
    count: DepartmentCountAggregateOutputType | null
    avg: DepartmentAvgAggregateOutputType | null
    sum: DepartmentSumAggregateOutputType | null
    min: DepartmentMinAggregateOutputType | null
    max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    id: number
  }

  export type DepartmentSumAggregateOutputType = {
    id: number
  }

  export type DepartmentMinAggregateOutputType = {
    id: number
    name: string | null
    manager: string | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: number
    name: string | null
    manager: string | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number | null
    manager: number | null
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    id?: true
  }

  export type DepartmentSumAggregateInputType = {
    id?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    manager?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    manager?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    manager?: true
    _all?: true
  }

  export type DepartmentAggregateArgs = {
    /**
     * Filter which Department to aggregate.
    **/
    where?: DepartmentWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Departments to fetch.
    **/
    orderBy?: Enumerable<DepartmentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
    [P in keyof T & keyof AggregateDepartment]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }



  export type DepartmentSelect = {
    id?: boolean
    name?: boolean
    manager?: boolean
    Employee?: boolean | EmployeeFindManyArgs
  }

  export type DepartmentInclude = {
    Employee?: boolean | EmployeeFindManyArgs
  }

  export type DepartmentGetPayload<
    S extends boolean | null | undefined | DepartmentArgs,
    U = keyof S
      > = S extends true
        ? Department
    : S extends undefined
    ? never
    : S extends DepartmentArgs | DepartmentFindManyArgs
    ?'include' extends U
    ? Department  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Employee'
        ? Array < EmployeeGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Department ?Department [P]
  : 
          P extends 'Employee'
        ? Array < EmployeeGetPayload<S['select'][P]>>  : never
  } 
    : Department
  : Department


  type DepartmentCountArgs = Merge<
    Omit<DepartmentFindManyArgs, 'select' | 'include'> & {
      select?: DepartmentCountAggregateInputType | true
    }
  >

  export interface DepartmentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DepartmentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DepartmentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Department'> extends True ? CheckSelect<T, Prisma__DepartmentClient<Department>, Prisma__DepartmentClient<DepartmentGetPayload<T>>> : CheckSelect<T, Prisma__DepartmentClient<Department | null >, Prisma__DepartmentClient<DepartmentGetPayload<T> | null >>

    /**
     * Find the first Department that matches the filter.
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DepartmentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DepartmentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Department'> extends True ? CheckSelect<T, Prisma__DepartmentClient<Department>, Prisma__DepartmentClient<DepartmentGetPayload<T>>> : CheckSelect<T, Prisma__DepartmentClient<Department | null >, Prisma__DepartmentClient<DepartmentGetPayload<T> | null >>

    /**
     * Find zero or more Departments that matches the filter.
     * @param {DepartmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DepartmentFindManyArgs>(
      args?: SelectSubset<T, DepartmentFindManyArgs>
    ): CheckSelect<T, Promise<Array<Department>>, Promise<Array<DepartmentGetPayload<T>>>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
    **/
    create<T extends DepartmentCreateArgs>(
      args: SelectSubset<T, DepartmentCreateArgs>
    ): CheckSelect<T, Prisma__DepartmentClient<Department>, Prisma__DepartmentClient<DepartmentGetPayload<T>>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
    **/
    delete<T extends DepartmentDeleteArgs>(
      args: SelectSubset<T, DepartmentDeleteArgs>
    ): CheckSelect<T, Prisma__DepartmentClient<Department>, Prisma__DepartmentClient<DepartmentGetPayload<T>>>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DepartmentUpdateArgs>(
      args: SelectSubset<T, DepartmentUpdateArgs>
    ): CheckSelect<T, Prisma__DepartmentClient<Department>, Prisma__DepartmentClient<DepartmentGetPayload<T>>>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DepartmentDeleteManyArgs>(
      args?: SelectSubset<T, DepartmentDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Departments.
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DepartmentUpdateManyArgs>(
      args: SelectSubset<T, DepartmentUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
    **/
    upsert<T extends DepartmentUpsertArgs>(
      args: SelectSubset<T, DepartmentUpsertArgs>
    ): CheckSelect<T, Prisma__DepartmentClient<Department>, Prisma__DepartmentClient<DepartmentGetPayload<T>>>

    /**
     * Count the number of Departments.
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Promise<GetDepartmentAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DepartmentClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Employee<T extends EmployeeFindManyArgs = {}>(args?: Subset<T, EmployeeFindManyArgs>): CheckSelect<T, Promise<Array<Employee>>, Promise<Array<EmployeeGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Department
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DepartmentInclude | null
    /**
     * Throw an Error if a Department can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Department to fetch.
    **/
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Department
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DepartmentInclude | null
    /**
     * Throw an Error if a Department can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Department to fetch.
    **/
    where?: DepartmentWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Departments to fetch.
    **/
    orderBy?: Enumerable<DepartmentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
    **/
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Departments.
    **/
    distinct?: Enumerable<DepartmentScalarFieldEnum>
  }


  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Department
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DepartmentInclude | null
    /**
     * Filter, which Departments to fetch.
    **/
    where?: DepartmentWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Departments to fetch.
    **/
    orderBy?: Enumerable<DepartmentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
    **/
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
    **/
    skip?: number
    distinct?: Enumerable<DepartmentScalarFieldEnum>
  }


  /**
   * Department create
   */
  export type DepartmentCreateArgs = {
    /**
     * Select specific fields to fetch from the Department
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DepartmentInclude | null
    /**
     * The data needed to create a Department.
    **/
    data: XOR<DepartmentUncheckedCreateInput, DepartmentCreateInput>
  }


  /**
   * Department update
   */
  export type DepartmentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Department
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DepartmentInclude | null
    /**
     * The data needed to update a Department.
    **/
    data: XOR<DepartmentUncheckedUpdateInput, DepartmentUpdateInput>
    /**
     * Choose, which Department to update.
    **/
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs = {
    data: XOR<DepartmentUncheckedUpdateManyInput, DepartmentUpdateManyMutationInput>
    where?: DepartmentWhereInput
  }


  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Department
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DepartmentInclude | null
    /**
     * The filter to search for the Department to update in case it exists.
    **/
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
    **/
    create: XOR<DepartmentUncheckedCreateInput, DepartmentCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<DepartmentUncheckedUpdateInput, DepartmentUpdateInput>
  }


  /**
   * Department delete
   */
  export type DepartmentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Department
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DepartmentInclude | null
    /**
     * Filter which Department to delete.
    **/
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs = {
    where?: DepartmentWhereInput
  }


  /**
   * Department without action
   */
  export type DepartmentArgs = {
    /**
     * Select specific fields to fetch from the Department
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DepartmentInclude | null
  }



  /**
   * Model Leave
   */


  export type AggregateLeave = {
    count: LeaveCountAggregateOutputType | null
    avg: LeaveAvgAggregateOutputType | null
    sum: LeaveSumAggregateOutputType | null
    min: LeaveMinAggregateOutputType | null
    max: LeaveMaxAggregateOutputType | null
  }

  export type LeaveAvgAggregateOutputType = {
    id: number
    employeeId: number
    totalLeavesLeft: number
  }

  export type LeaveSumAggregateOutputType = {
    id: number
    employeeId: number
    totalLeavesLeft: number
  }

  export type LeaveMinAggregateOutputType = {
    id: number
    employeeId: number
    leaveType: LeaveType | null
    startDate: Date | null
    endDate: Date | null
    leaveDescription: string | null
    valid: boolean | null
    leaveTimeStamp: Date | null
    leaveStatus: Status | null
    statusTimeStamp: Date | null
    totalLeavesLeft: number
  }

  export type LeaveMaxAggregateOutputType = {
    id: number
    employeeId: number
    leaveType: LeaveType | null
    startDate: Date | null
    endDate: Date | null
    leaveDescription: string | null
    valid: boolean | null
    leaveTimeStamp: Date | null
    leaveStatus: Status | null
    statusTimeStamp: Date | null
    totalLeavesLeft: number
  }

  export type LeaveCountAggregateOutputType = {
    id: number
    employeeId: number
    leaveType: number | null
    startDate: number | null
    endDate: number | null
    leaveDescription: number | null
    valid: number | null
    leaveTimeStamp: number | null
    leaveStatus: number | null
    statusTimeStamp: number | null
    totalLeavesLeft: number
    _all: number
  }


  export type LeaveAvgAggregateInputType = {
    id?: true
    employeeId?: true
    totalLeavesLeft?: true
  }

  export type LeaveSumAggregateInputType = {
    id?: true
    employeeId?: true
    totalLeavesLeft?: true
  }

  export type LeaveMinAggregateInputType = {
    id?: true
    employeeId?: true
    leaveType?: true
    startDate?: true
    endDate?: true
    leaveDescription?: true
    valid?: true
    leaveTimeStamp?: true
    leaveStatus?: true
    statusTimeStamp?: true
    totalLeavesLeft?: true
  }

  export type LeaveMaxAggregateInputType = {
    id?: true
    employeeId?: true
    leaveType?: true
    startDate?: true
    endDate?: true
    leaveDescription?: true
    valid?: true
    leaveTimeStamp?: true
    leaveStatus?: true
    statusTimeStamp?: true
    totalLeavesLeft?: true
  }

  export type LeaveCountAggregateInputType = {
    id?: true
    employeeId?: true
    leaveType?: true
    startDate?: true
    endDate?: true
    leaveDescription?: true
    valid?: true
    leaveTimeStamp?: true
    leaveStatus?: true
    statusTimeStamp?: true
    totalLeavesLeft?: true
    _all?: true
  }

  export type LeaveAggregateArgs = {
    /**
     * Filter which Leave to aggregate.
    **/
    where?: LeaveWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Leaves to fetch.
    **/
    orderBy?: Enumerable<LeaveOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: LeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leaves from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leaves.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leaves
    **/
    count?: true | LeaveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: LeaveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: LeaveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: LeaveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: LeaveMaxAggregateInputType
  }

  export type GetLeaveAggregateType<T extends LeaveAggregateArgs> = {
    [P in keyof T & keyof AggregateLeave]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeave[P]>
      : GetScalarType<T[P], AggregateLeave[P]>
  }



  export type LeaveSelect = {
    id?: boolean
    employeeId?: boolean
    employee?: boolean | EmployeeArgs
    leaveType?: boolean
    startDate?: boolean
    endDate?: boolean
    leaveDescription?: boolean
    valid?: boolean
    leaveTimeStamp?: boolean
    leaveStatus?: boolean
    statusTimeStamp?: boolean
    totalLeavesLeft?: boolean
  }

  export type LeaveInclude = {
    employee?: boolean | EmployeeArgs
  }

  export type LeaveGetPayload<
    S extends boolean | null | undefined | LeaveArgs,
    U = keyof S
      > = S extends true
        ? Leave
    : S extends undefined
    ? never
    : S extends LeaveArgs | LeaveFindManyArgs
    ?'include' extends U
    ? Leave  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'employee'
        ? EmployeeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Leave ?Leave [P]
  : 
          P extends 'employee'
        ? EmployeeGetPayload<S['select'][P]> : never
  } 
    : Leave
  : Leave


  type LeaveCountArgs = Merge<
    Omit<LeaveFindManyArgs, 'select' | 'include'> & {
      select?: LeaveCountAggregateInputType | true
    }
  >

  export interface LeaveDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Leave that matches the filter.
     * @param {LeaveFindUniqueArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LeaveFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LeaveFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Leave'> extends True ? CheckSelect<T, Prisma__LeaveClient<Leave>, Prisma__LeaveClient<LeaveGetPayload<T>>> : CheckSelect<T, Prisma__LeaveClient<Leave | null >, Prisma__LeaveClient<LeaveGetPayload<T> | null >>

    /**
     * Find the first Leave that matches the filter.
     * @param {LeaveFindFirstArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LeaveFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LeaveFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Leave'> extends True ? CheckSelect<T, Prisma__LeaveClient<Leave>, Prisma__LeaveClient<LeaveGetPayload<T>>> : CheckSelect<T, Prisma__LeaveClient<Leave | null >, Prisma__LeaveClient<LeaveGetPayload<T> | null >>

    /**
     * Find zero or more Leaves that matches the filter.
     * @param {LeaveFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leaves
     * const leaves = await prisma.leave.findMany()
     * 
     * // Get first 10 Leaves
     * const leaves = await prisma.leave.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaveWithIdOnly = await prisma.leave.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LeaveFindManyArgs>(
      args?: SelectSubset<T, LeaveFindManyArgs>
    ): CheckSelect<T, Promise<Array<Leave>>, Promise<Array<LeaveGetPayload<T>>>>

    /**
     * Create a Leave.
     * @param {LeaveCreateArgs} args - Arguments to create a Leave.
     * @example
     * // Create one Leave
     * const Leave = await prisma.leave.create({
     *   data: {
     *     // ... data to create a Leave
     *   }
     * })
     * 
    **/
    create<T extends LeaveCreateArgs>(
      args: SelectSubset<T, LeaveCreateArgs>
    ): CheckSelect<T, Prisma__LeaveClient<Leave>, Prisma__LeaveClient<LeaveGetPayload<T>>>

    /**
     * Delete a Leave.
     * @param {LeaveDeleteArgs} args - Arguments to delete one Leave.
     * @example
     * // Delete one Leave
     * const Leave = await prisma.leave.delete({
     *   where: {
     *     // ... filter to delete one Leave
     *   }
     * })
     * 
    **/
    delete<T extends LeaveDeleteArgs>(
      args: SelectSubset<T, LeaveDeleteArgs>
    ): CheckSelect<T, Prisma__LeaveClient<Leave>, Prisma__LeaveClient<LeaveGetPayload<T>>>

    /**
     * Update one Leave.
     * @param {LeaveUpdateArgs} args - Arguments to update one Leave.
     * @example
     * // Update one Leave
     * const leave = await prisma.leave.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LeaveUpdateArgs>(
      args: SelectSubset<T, LeaveUpdateArgs>
    ): CheckSelect<T, Prisma__LeaveClient<Leave>, Prisma__LeaveClient<LeaveGetPayload<T>>>

    /**
     * Delete zero or more Leaves.
     * @param {LeaveDeleteManyArgs} args - Arguments to filter Leaves to delete.
     * @example
     * // Delete a few Leaves
     * const { count } = await prisma.leave.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LeaveDeleteManyArgs>(
      args?: SelectSubset<T, LeaveDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Leaves.
     * @param {LeaveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leaves
     * const leave = await prisma.leave.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LeaveUpdateManyArgs>(
      args: SelectSubset<T, LeaveUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Leave.
     * @param {LeaveUpsertArgs} args - Arguments to update or create a Leave.
     * @example
     * // Update or create a Leave
     * const leave = await prisma.leave.upsert({
     *   create: {
     *     // ... data to create a Leave
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Leave we want to update
     *   }
     * })
    **/
    upsert<T extends LeaveUpsertArgs>(
      args: SelectSubset<T, LeaveUpsertArgs>
    ): CheckSelect<T, Prisma__LeaveClient<Leave>, Prisma__LeaveClient<LeaveGetPayload<T>>>

    /**
     * Count the number of Leaves.
     * @param {LeaveCountArgs} args - Arguments to filter Leaves to count.
     * @example
     * // Count the number of Leaves
     * const count = await prisma.leave.count({
     *   where: {
     *     // ... the filter for the Leaves we want to count
     *   }
     * })
    **/
    count<T extends LeaveCountArgs>(
      args?: Subset<T, LeaveCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Leave.
     * @param {LeaveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveAggregateArgs>(args: Subset<T, LeaveAggregateArgs>): Promise<GetLeaveAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Leave.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LeaveClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    employee<T extends EmployeeArgs = {}>(args?: Subset<T, EmployeeArgs>): CheckSelect<T, Prisma__EmployeeClient<Employee | null >, Prisma__EmployeeClient<EmployeeGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Leave findUnique
   */
  export type LeaveFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Leave
    **/
    select?: LeaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeaveInclude | null
    /**
     * Throw an Error if a Leave can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Leave to fetch.
    **/
    where: LeaveWhereUniqueInput
  }


  /**
   * Leave findFirst
   */
  export type LeaveFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Leave
    **/
    select?: LeaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeaveInclude | null
    /**
     * Throw an Error if a Leave can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Leave to fetch.
    **/
    where?: LeaveWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Leaves to fetch.
    **/
    orderBy?: Enumerable<LeaveOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leaves.
    **/
    cursor?: LeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leaves from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leaves.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Leaves.
    **/
    distinct?: Enumerable<LeaveScalarFieldEnum>
  }


  /**
   * Leave findMany
   */
  export type LeaveFindManyArgs = {
    /**
     * Select specific fields to fetch from the Leave
    **/
    select?: LeaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeaveInclude | null
    /**
     * Filter, which Leaves to fetch.
    **/
    where?: LeaveWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Leaves to fetch.
    **/
    orderBy?: Enumerable<LeaveOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leaves.
    **/
    cursor?: LeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leaves from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leaves.
    **/
    skip?: number
    distinct?: Enumerable<LeaveScalarFieldEnum>
  }


  /**
   * Leave create
   */
  export type LeaveCreateArgs = {
    /**
     * Select specific fields to fetch from the Leave
    **/
    select?: LeaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeaveInclude | null
    /**
     * The data needed to create a Leave.
    **/
    data: XOR<LeaveUncheckedCreateInput, LeaveCreateInput>
  }


  /**
   * Leave update
   */
  export type LeaveUpdateArgs = {
    /**
     * Select specific fields to fetch from the Leave
    **/
    select?: LeaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeaveInclude | null
    /**
     * The data needed to update a Leave.
    **/
    data: XOR<LeaveUncheckedUpdateInput, LeaveUpdateInput>
    /**
     * Choose, which Leave to update.
    **/
    where: LeaveWhereUniqueInput
  }


  /**
   * Leave updateMany
   */
  export type LeaveUpdateManyArgs = {
    data: XOR<LeaveUncheckedUpdateManyInput, LeaveUpdateManyMutationInput>
    where?: LeaveWhereInput
  }


  /**
   * Leave upsert
   */
  export type LeaveUpsertArgs = {
    /**
     * Select specific fields to fetch from the Leave
    **/
    select?: LeaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeaveInclude | null
    /**
     * The filter to search for the Leave to update in case it exists.
    **/
    where: LeaveWhereUniqueInput
    /**
     * In case the Leave found by the `where` argument doesn't exist, create a new Leave with this data.
    **/
    create: XOR<LeaveUncheckedCreateInput, LeaveCreateInput>
    /**
     * In case the Leave was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<LeaveUncheckedUpdateInput, LeaveUpdateInput>
  }


  /**
   * Leave delete
   */
  export type LeaveDeleteArgs = {
    /**
     * Select specific fields to fetch from the Leave
    **/
    select?: LeaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeaveInclude | null
    /**
     * Filter which Leave to delete.
    **/
    where: LeaveWhereUniqueInput
  }


  /**
   * Leave deleteMany
   */
  export type LeaveDeleteManyArgs = {
    where?: LeaveWhereInput
  }


  /**
   * Leave without action
   */
  export type LeaveArgs = {
    /**
     * Select specific fields to fetch from the Leave
    **/
    select?: LeaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeaveInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserloginScalarFieldEnum: {
    id: 'id',
    userName: 'userName',
    password: 'password',
    role: 'role',
    empId: 'empId'
  };

  export type UserloginScalarFieldEnum = (typeof UserloginScalarFieldEnum)[keyof typeof UserloginScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    mobile: 'mobile',
    roleDescription: 'roleDescription',
    valid: 'valid',
    depId: 'depId'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    manager: 'manager'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const LeaveScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    leaveType: 'leaveType',
    startDate: 'startDate',
    endDate: 'endDate',
    leaveDescription: 'leaveDescription',
    valid: 'valid',
    leaveTimeStamp: 'leaveTimeStamp',
    leaveStatus: 'leaveStatus',
    statusTimeStamp: 'statusTimeStamp',
    totalLeavesLeft: 'totalLeavesLeft'
  };

  export type LeaveScalarFieldEnum = (typeof LeaveScalarFieldEnum)[keyof typeof LeaveScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserloginWhereInput = {
    AND?: Enumerable<UserloginWhereInput>
    OR?: Enumerable<UserloginWhereInput>
    NOT?: Enumerable<UserloginWhereInput>
    id?: IntFilter | number
    userName?: StringFilter | string
    password?: StringFilter | string
    role?: EnumERoleFilter | ERole
    empId?: IntFilter | number
    emp?: XOR<EmployeeWhereInput, EmployeeRelationFilter>
  }

  export type UserloginOrderByInput = {
    id?: SortOrder
    userName?: SortOrder
    password?: SortOrder
    role?: SortOrder
    empId?: SortOrder
    emp?: EmployeeOrderByInput
  }

  export type UserloginWhereUniqueInput = {
    id?: number
    userName?: string
  }

  export type EmployeeWhereInput = {
    AND?: Enumerable<EmployeeWhereInput>
    OR?: Enumerable<EmployeeWhereInput>
    NOT?: Enumerable<EmployeeWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    mobile?: StringFilter | string
    roleDescription?: StringFilter | string
    valid?: BoolFilter | boolean
    depId?: IntFilter | number
    dept?: XOR<DepartmentWhereInput, DepartmentRelationFilter>
    leaveHistory?: LeaveListRelationFilter
    Userlogin?: UserloginListRelationFilter
  }

  export type EmployeeOrderByInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    roleDescription?: SortOrder
    valid?: SortOrder
    depId?: SortOrder
    dept?: DepartmentOrderByInput
  }

  export type EmployeeWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type DepartmentWhereInput = {
    AND?: Enumerable<DepartmentWhereInput>
    OR?: Enumerable<DepartmentWhereInput>
    NOT?: Enumerable<DepartmentWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    manager?: StringFilter | string
    Employee?: EmployeeListRelationFilter
  }

  export type DepartmentOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    manager?: SortOrder
  }

  export type DepartmentWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type LeaveWhereInput = {
    AND?: Enumerable<LeaveWhereInput>
    OR?: Enumerable<LeaveWhereInput>
    NOT?: Enumerable<LeaveWhereInput>
    id?: IntFilter | number
    employeeId?: IntFilter | number
    employee?: XOR<EmployeeWhereInput, EmployeeRelationFilter>
    leaveType?: EnumLeaveTypeFilter | LeaveType
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    leaveDescription?: StringFilter | string
    valid?: BoolFilter | boolean
    leaveTimeStamp?: DateTimeFilter | Date | string
    leaveStatus?: EnumStatusFilter | Status
    statusTimeStamp?: DateTimeFilter | Date | string
    totalLeavesLeft?: IntFilter | number
  }

  export type LeaveOrderByInput = {
    id?: SortOrder
    employeeId?: SortOrder
    employee?: EmployeeOrderByInput
    leaveType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    leaveDescription?: SortOrder
    valid?: SortOrder
    leaveTimeStamp?: SortOrder
    leaveStatus?: SortOrder
    statusTimeStamp?: SortOrder
    totalLeavesLeft?: SortOrder
  }

  export type LeaveWhereUniqueInput = {
    id?: number
  }

  export type UserloginCreateInput = {
    userName: string
    password: string
    role?: ERole
    emp: EmployeeCreateNestedOneWithoutUserloginInput
  }

  export type UserloginUncheckedCreateInput = {
    id?: number
    userName: string
    password: string
    role?: ERole
    empId: number
  }

  export type UserloginUpdateInput = {
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumERoleFieldUpdateOperationsInput | ERole
    emp?: EmployeeUpdateOneRequiredWithoutUserloginInput
  }

  export type UserloginUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumERoleFieldUpdateOperationsInput | ERole
    empId?: IntFieldUpdateOperationsInput | number
  }

  export type UserloginUpdateManyMutationInput = {
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumERoleFieldUpdateOperationsInput | ERole
  }

  export type UserloginUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumERoleFieldUpdateOperationsInput | ERole
    empId?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeCreateInput = {
    firstName: string
    lastName: string
    email: string
    mobile: string
    roleDescription: string
    valid?: boolean
    dept: DepartmentCreateNestedOneWithoutEmployeeInput
    leaveHistory?: LeaveCreateNestedManyWithoutEmployeeInput
    Userlogin?: UserloginCreateNestedManyWithoutEmpInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    mobile: string
    roleDescription: string
    valid?: boolean
    depId: number
    leaveHistory?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    Userlogin?: UserloginUncheckedCreateNestedManyWithoutEmpInput
  }

  export type EmployeeUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roleDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    dept?: DepartmentUpdateOneRequiredWithoutEmployeeInput
    leaveHistory?: LeaveUpdateManyWithoutEmployeeInput
    Userlogin?: UserloginUpdateManyWithoutEmpInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roleDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    depId?: IntFieldUpdateOperationsInput | number
    leaveHistory?: LeaveUncheckedUpdateManyWithoutEmployeeInput
    Userlogin?: UserloginUncheckedUpdateManyWithoutEmpInput
  }

  export type EmployeeUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roleDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roleDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    depId?: IntFieldUpdateOperationsInput | number
  }

  export type DepartmentCreateInput = {
    name: string
    manager: string
    Employee?: EmployeeCreateNestedManyWithoutDeptInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: number
    name: string
    manager: string
    Employee?: EmployeeUncheckedCreateNestedManyWithoutDeptInput
  }

  export type DepartmentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
    Employee?: EmployeeUpdateManyWithoutDeptInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
    Employee?: EmployeeUncheckedUpdateManyWithoutDeptInput
  }

  export type DepartmentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveCreateInput = {
    leaveType?: LeaveType
    startDate: Date | string
    endDate: Date | string
    leaveDescription: string
    valid?: boolean
    leaveTimeStamp?: Date | string
    leaveStatus?: Status
    statusTimeStamp?: Date | string
    totalLeavesLeft?: number
    employee: EmployeeCreateNestedOneWithoutLeaveHistoryInput
  }

  export type LeaveUncheckedCreateInput = {
    id?: number
    employeeId: number
    leaveType?: LeaveType
    startDate: Date | string
    endDate: Date | string
    leaveDescription: string
    valid?: boolean
    leaveTimeStamp?: Date | string
    leaveStatus?: Status
    statusTimeStamp?: Date | string
    totalLeavesLeft?: number
  }

  export type LeaveUpdateInput = {
    leaveType?: EnumLeaveTypeFieldUpdateOperationsInput | LeaveType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leaveTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveStatus?: EnumStatusFieldUpdateOperationsInput | Status
    statusTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLeavesLeft?: IntFieldUpdateOperationsInput | number
    employee?: EmployeeUpdateOneRequiredWithoutLeaveHistoryInput
  }

  export type LeaveUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    leaveType?: EnumLeaveTypeFieldUpdateOperationsInput | LeaveType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leaveTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveStatus?: EnumStatusFieldUpdateOperationsInput | Status
    statusTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLeavesLeft?: IntFieldUpdateOperationsInput | number
  }

  export type LeaveUpdateManyMutationInput = {
    leaveType?: EnumLeaveTypeFieldUpdateOperationsInput | LeaveType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leaveTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveStatus?: EnumStatusFieldUpdateOperationsInput | Status
    statusTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLeavesLeft?: IntFieldUpdateOperationsInput | number
  }

  export type LeaveUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    leaveType?: EnumLeaveTypeFieldUpdateOperationsInput | LeaveType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leaveTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveStatus?: EnumStatusFieldUpdateOperationsInput | Status
    statusTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLeavesLeft?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type EnumERoleFilter = {
    equals?: ERole
    in?: Enumerable<ERole>
    notIn?: Enumerable<ERole>
    not?: NestedEnumERoleFilter | ERole
  }

  export type EmployeeRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DepartmentRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type LeaveListRelationFilter = {
    every?: LeaveWhereInput
    some?: LeaveWhereInput
    none?: LeaveWhereInput
  }

  export type UserloginListRelationFilter = {
    every?: UserloginWhereInput
    some?: UserloginWhereInput
    none?: UserloginWhereInput
  }

  export type EmployeeListRelationFilter = {
    every?: EmployeeWhereInput
    some?: EmployeeWhereInput
    none?: EmployeeWhereInput
  }

  export type EnumLeaveTypeFilter = {
    equals?: LeaveType
    in?: Enumerable<LeaveType>
    notIn?: Enumerable<LeaveType>
    not?: NestedEnumLeaveTypeFilter | LeaveType
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EnumStatusFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusFilter | Status
  }

  export type EmployeeCreateNestedOneWithoutUserloginInput = {
    create?: XOR<EmployeeUncheckedCreateWithoutUserloginInput, EmployeeCreateWithoutUserloginInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserloginInput
    connect?: EmployeeWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumERoleFieldUpdateOperationsInput = {
    set?: ERole
  }

  export type EmployeeUpdateOneRequiredWithoutUserloginInput = {
    create?: XOR<EmployeeUncheckedCreateWithoutUserloginInput, EmployeeCreateWithoutUserloginInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserloginInput
    upsert?: EmployeeUpsertWithoutUserloginInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<EmployeeUncheckedUpdateWithoutUserloginInput, EmployeeUpdateWithoutUserloginInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DepartmentCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<DepartmentUncheckedCreateWithoutEmployeeInput, DepartmentCreateWithoutEmployeeInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutEmployeeInput
    connect?: DepartmentWhereUniqueInput
  }

  export type LeaveCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<LeaveUncheckedCreateWithoutEmployeeInput>, Enumerable<LeaveCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<LeaveCreateOrConnectWithoutemployeeInput>
    connect?: Enumerable<LeaveWhereUniqueInput>
  }

  export type UserloginCreateNestedManyWithoutEmpInput = {
    create?: XOR<Enumerable<UserloginUncheckedCreateWithoutEmpInput>, Enumerable<UserloginCreateWithoutEmpInput>>
    connectOrCreate?: Enumerable<UserloginCreateOrConnectWithoutempInput>
    connect?: Enumerable<UserloginWhereUniqueInput>
  }

  export type LeaveUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<LeaveUncheckedCreateWithoutEmployeeInput>, Enumerable<LeaveCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<LeaveCreateOrConnectWithoutemployeeInput>
    connect?: Enumerable<LeaveWhereUniqueInput>
  }

  export type UserloginUncheckedCreateNestedManyWithoutEmpInput = {
    create?: XOR<Enumerable<UserloginUncheckedCreateWithoutEmpInput>, Enumerable<UserloginCreateWithoutEmpInput>>
    connectOrCreate?: Enumerable<UserloginCreateOrConnectWithoutempInput>
    connect?: Enumerable<UserloginWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DepartmentUpdateOneRequiredWithoutEmployeeInput = {
    create?: XOR<DepartmentUncheckedCreateWithoutEmployeeInput, DepartmentCreateWithoutEmployeeInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutEmployeeInput
    upsert?: DepartmentUpsertWithoutEmployeeInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<DepartmentUncheckedUpdateWithoutEmployeeInput, DepartmentUpdateWithoutEmployeeInput>
  }

  export type LeaveUpdateManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<LeaveUncheckedCreateWithoutEmployeeInput>, Enumerable<LeaveCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<LeaveCreateOrConnectWithoutemployeeInput>
    upsert?: Enumerable<LeaveUpsertWithWhereUniqueWithoutEmployeeInput>
    connect?: Enumerable<LeaveWhereUniqueInput>
    set?: Enumerable<LeaveWhereUniqueInput>
    disconnect?: Enumerable<LeaveWhereUniqueInput>
    delete?: Enumerable<LeaveWhereUniqueInput>
    update?: Enumerable<LeaveUpdateWithWhereUniqueWithoutEmployeeInput>
    updateMany?: Enumerable<LeaveUpdateManyWithWhereWithoutEmployeeInput>
    deleteMany?: Enumerable<LeaveScalarWhereInput>
  }

  export type UserloginUpdateManyWithoutEmpInput = {
    create?: XOR<Enumerable<UserloginUncheckedCreateWithoutEmpInput>, Enumerable<UserloginCreateWithoutEmpInput>>
    connectOrCreate?: Enumerable<UserloginCreateOrConnectWithoutempInput>
    upsert?: Enumerable<UserloginUpsertWithWhereUniqueWithoutEmpInput>
    connect?: Enumerable<UserloginWhereUniqueInput>
    set?: Enumerable<UserloginWhereUniqueInput>
    disconnect?: Enumerable<UserloginWhereUniqueInput>
    delete?: Enumerable<UserloginWhereUniqueInput>
    update?: Enumerable<UserloginUpdateWithWhereUniqueWithoutEmpInput>
    updateMany?: Enumerable<UserloginUpdateManyWithWhereWithoutEmpInput>
    deleteMany?: Enumerable<UserloginScalarWhereInput>
  }

  export type LeaveUncheckedUpdateManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<LeaveUncheckedCreateWithoutEmployeeInput>, Enumerable<LeaveCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<LeaveCreateOrConnectWithoutemployeeInput>
    upsert?: Enumerable<LeaveUpsertWithWhereUniqueWithoutEmployeeInput>
    connect?: Enumerable<LeaveWhereUniqueInput>
    set?: Enumerable<LeaveWhereUniqueInput>
    disconnect?: Enumerable<LeaveWhereUniqueInput>
    delete?: Enumerable<LeaveWhereUniqueInput>
    update?: Enumerable<LeaveUpdateWithWhereUniqueWithoutEmployeeInput>
    updateMany?: Enumerable<LeaveUpdateManyWithWhereWithoutEmployeeInput>
    deleteMany?: Enumerable<LeaveScalarWhereInput>
  }

  export type UserloginUncheckedUpdateManyWithoutEmpInput = {
    create?: XOR<Enumerable<UserloginUncheckedCreateWithoutEmpInput>, Enumerable<UserloginCreateWithoutEmpInput>>
    connectOrCreate?: Enumerable<UserloginCreateOrConnectWithoutempInput>
    upsert?: Enumerable<UserloginUpsertWithWhereUniqueWithoutEmpInput>
    connect?: Enumerable<UserloginWhereUniqueInput>
    set?: Enumerable<UserloginWhereUniqueInput>
    disconnect?: Enumerable<UserloginWhereUniqueInput>
    delete?: Enumerable<UserloginWhereUniqueInput>
    update?: Enumerable<UserloginUpdateWithWhereUniqueWithoutEmpInput>
    updateMany?: Enumerable<UserloginUpdateManyWithWhereWithoutEmpInput>
    deleteMany?: Enumerable<UserloginScalarWhereInput>
  }

  export type EmployeeCreateNestedManyWithoutDeptInput = {
    create?: XOR<Enumerable<EmployeeUncheckedCreateWithoutDeptInput>, Enumerable<EmployeeCreateWithoutDeptInput>>
    connectOrCreate?: Enumerable<EmployeeCreateOrConnectWithoutdeptInput>
    connect?: Enumerable<EmployeeWhereUniqueInput>
  }

  export type EmployeeUncheckedCreateNestedManyWithoutDeptInput = {
    create?: XOR<Enumerable<EmployeeUncheckedCreateWithoutDeptInput>, Enumerable<EmployeeCreateWithoutDeptInput>>
    connectOrCreate?: Enumerable<EmployeeCreateOrConnectWithoutdeptInput>
    connect?: Enumerable<EmployeeWhereUniqueInput>
  }

  export type EmployeeUpdateManyWithoutDeptInput = {
    create?: XOR<Enumerable<EmployeeUncheckedCreateWithoutDeptInput>, Enumerable<EmployeeCreateWithoutDeptInput>>
    connectOrCreate?: Enumerable<EmployeeCreateOrConnectWithoutdeptInput>
    upsert?: Enumerable<EmployeeUpsertWithWhereUniqueWithoutDeptInput>
    connect?: Enumerable<EmployeeWhereUniqueInput>
    set?: Enumerable<EmployeeWhereUniqueInput>
    disconnect?: Enumerable<EmployeeWhereUniqueInput>
    delete?: Enumerable<EmployeeWhereUniqueInput>
    update?: Enumerable<EmployeeUpdateWithWhereUniqueWithoutDeptInput>
    updateMany?: Enumerable<EmployeeUpdateManyWithWhereWithoutDeptInput>
    deleteMany?: Enumerable<EmployeeScalarWhereInput>
  }

  export type EmployeeUncheckedUpdateManyWithoutDeptInput = {
    create?: XOR<Enumerable<EmployeeUncheckedCreateWithoutDeptInput>, Enumerable<EmployeeCreateWithoutDeptInput>>
    connectOrCreate?: Enumerable<EmployeeCreateOrConnectWithoutdeptInput>
    upsert?: Enumerable<EmployeeUpsertWithWhereUniqueWithoutDeptInput>
    connect?: Enumerable<EmployeeWhereUniqueInput>
    set?: Enumerable<EmployeeWhereUniqueInput>
    disconnect?: Enumerable<EmployeeWhereUniqueInput>
    delete?: Enumerable<EmployeeWhereUniqueInput>
    update?: Enumerable<EmployeeUpdateWithWhereUniqueWithoutDeptInput>
    updateMany?: Enumerable<EmployeeUpdateManyWithWhereWithoutDeptInput>
    deleteMany?: Enumerable<EmployeeScalarWhereInput>
  }

  export type EmployeeCreateNestedOneWithoutLeaveHistoryInput = {
    create?: XOR<EmployeeUncheckedCreateWithoutLeaveHistoryInput, EmployeeCreateWithoutLeaveHistoryInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutleaveHistoryInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EnumLeaveTypeFieldUpdateOperationsInput = {
    set?: LeaveType
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: Status
  }

  export type EmployeeUpdateOneRequiredWithoutLeaveHistoryInput = {
    create?: XOR<EmployeeUncheckedCreateWithoutLeaveHistoryInput, EmployeeCreateWithoutLeaveHistoryInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutleaveHistoryInput
    upsert?: EmployeeUpsertWithoutLeaveHistoryInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<EmployeeUncheckedUpdateWithoutLeaveHistoryInput, EmployeeUpdateWithoutLeaveHistoryInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumERoleFilter = {
    equals?: ERole
    in?: Enumerable<ERole>
    notIn?: Enumerable<ERole>
    not?: NestedEnumERoleFilter | ERole
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedEnumLeaveTypeFilter = {
    equals?: LeaveType
    in?: Enumerable<LeaveType>
    notIn?: Enumerable<LeaveType>
    not?: NestedEnumLeaveTypeFilter | LeaveType
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumStatusFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusFilter | Status
  }

  export type EmployeeCreateWithoutUserloginInput = {
    firstName: string
    lastName: string
    email: string
    mobile: string
    roleDescription: string
    valid?: boolean
    dept: DepartmentCreateNestedOneWithoutEmployeeInput
    leaveHistory?: LeaveCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutUserloginInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    mobile: string
    roleDescription: string
    valid?: boolean
    depId: number
    leaveHistory?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutUserloginInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeUncheckedCreateWithoutUserloginInput, EmployeeCreateWithoutUserloginInput>
  }

  export type EmployeeUpsertWithoutUserloginInput = {
    update: XOR<EmployeeUncheckedUpdateWithoutUserloginInput, EmployeeUpdateWithoutUserloginInput>
    create: XOR<EmployeeUncheckedCreateWithoutUserloginInput, EmployeeCreateWithoutUserloginInput>
  }

  export type EmployeeUpdateWithoutUserloginInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roleDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    dept?: DepartmentUpdateOneRequiredWithoutEmployeeInput
    leaveHistory?: LeaveUpdateManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedUpdateWithoutUserloginInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roleDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    depId?: IntFieldUpdateOperationsInput | number
    leaveHistory?: LeaveUncheckedUpdateManyWithoutEmployeeInput
  }

  export type DepartmentCreateWithoutEmployeeInput = {
    name: string
    manager: string
  }

  export type DepartmentUncheckedCreateWithoutEmployeeInput = {
    id?: number
    name: string
    manager: string
  }

  export type DepartmentCreateOrConnectWithoutEmployeeInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentUncheckedCreateWithoutEmployeeInput, DepartmentCreateWithoutEmployeeInput>
  }

  export type LeaveCreateWithoutEmployeeInput = {
    leaveType?: LeaveType
    startDate: Date | string
    endDate: Date | string
    leaveDescription: string
    valid?: boolean
    leaveTimeStamp?: Date | string
    leaveStatus?: Status
    statusTimeStamp?: Date | string
    totalLeavesLeft?: number
  }

  export type LeaveUncheckedCreateWithoutEmployeeInput = {
    id?: number
    leaveType?: LeaveType
    startDate: Date | string
    endDate: Date | string
    leaveDescription: string
    valid?: boolean
    leaveTimeStamp?: Date | string
    leaveStatus?: Status
    statusTimeStamp?: Date | string
    totalLeavesLeft?: number
  }

  export type LeaveCreateOrConnectWithoutemployeeInput = {
    where: LeaveWhereUniqueInput
    create: XOR<LeaveUncheckedCreateWithoutEmployeeInput, LeaveCreateWithoutEmployeeInput>
  }

  export type UserloginCreateWithoutEmpInput = {
    userName: string
    password: string
    role?: ERole
  }

  export type UserloginUncheckedCreateWithoutEmpInput = {
    id?: number
    userName: string
    password: string
    role?: ERole
  }

  export type UserloginCreateOrConnectWithoutempInput = {
    where: UserloginWhereUniqueInput
    create: XOR<UserloginUncheckedCreateWithoutEmpInput, UserloginCreateWithoutEmpInput>
  }

  export type DepartmentUpsertWithoutEmployeeInput = {
    update: XOR<DepartmentUncheckedUpdateWithoutEmployeeInput, DepartmentUpdateWithoutEmployeeInput>
    create: XOR<DepartmentUncheckedCreateWithoutEmployeeInput, DepartmentCreateWithoutEmployeeInput>
  }

  export type DepartmentUpdateWithoutEmployeeInput = {
    name?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: LeaveWhereUniqueInput
    update: XOR<LeaveUncheckedUpdateWithoutEmployeeInput, LeaveUpdateWithoutEmployeeInput>
    create: XOR<LeaveUncheckedCreateWithoutEmployeeInput, LeaveCreateWithoutEmployeeInput>
  }

  export type LeaveUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: LeaveWhereUniqueInput
    data: XOR<LeaveUncheckedUpdateWithoutEmployeeInput, LeaveUpdateWithoutEmployeeInput>
  }

  export type LeaveUpdateManyWithWhereWithoutEmployeeInput = {
    where: LeaveScalarWhereInput
    data: XOR<LeaveUncheckedUpdateManyWithoutLeaveHistoryInput, LeaveUpdateManyMutationInput>
  }

  export type LeaveScalarWhereInput = {
    AND?: Enumerable<LeaveScalarWhereInput>
    OR?: Enumerable<LeaveScalarWhereInput>
    NOT?: Enumerable<LeaveScalarWhereInput>
    id?: IntFilter | number
    employeeId?: IntFilter | number
    leaveType?: EnumLeaveTypeFilter | LeaveType
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    leaveDescription?: StringFilter | string
    valid?: BoolFilter | boolean
    leaveTimeStamp?: DateTimeFilter | Date | string
    leaveStatus?: EnumStatusFilter | Status
    statusTimeStamp?: DateTimeFilter | Date | string
    totalLeavesLeft?: IntFilter | number
  }

  export type UserloginUpsertWithWhereUniqueWithoutEmpInput = {
    where: UserloginWhereUniqueInput
    update: XOR<UserloginUncheckedUpdateWithoutEmpInput, UserloginUpdateWithoutEmpInput>
    create: XOR<UserloginUncheckedCreateWithoutEmpInput, UserloginCreateWithoutEmpInput>
  }

  export type UserloginUpdateWithWhereUniqueWithoutEmpInput = {
    where: UserloginWhereUniqueInput
    data: XOR<UserloginUncheckedUpdateWithoutEmpInput, UserloginUpdateWithoutEmpInput>
  }

  export type UserloginUpdateManyWithWhereWithoutEmpInput = {
    where: UserloginScalarWhereInput
    data: XOR<UserloginUncheckedUpdateManyWithoutUserloginInput, UserloginUpdateManyMutationInput>
  }

  export type UserloginScalarWhereInput = {
    AND?: Enumerable<UserloginScalarWhereInput>
    OR?: Enumerable<UserloginScalarWhereInput>
    NOT?: Enumerable<UserloginScalarWhereInput>
    id?: IntFilter | number
    userName?: StringFilter | string
    password?: StringFilter | string
    role?: EnumERoleFilter | ERole
    empId?: IntFilter | number
  }

  export type EmployeeCreateWithoutDeptInput = {
    firstName: string
    lastName: string
    email: string
    mobile: string
    roleDescription: string
    valid?: boolean
    leaveHistory?: LeaveCreateNestedManyWithoutEmployeeInput
    Userlogin?: UserloginCreateNestedManyWithoutEmpInput
  }

  export type EmployeeUncheckedCreateWithoutDeptInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    mobile: string
    roleDescription: string
    valid?: boolean
    leaveHistory?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    Userlogin?: UserloginUncheckedCreateNestedManyWithoutEmpInput
  }

  export type EmployeeCreateOrConnectWithoutdeptInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeUncheckedCreateWithoutDeptInput, EmployeeCreateWithoutDeptInput>
  }

  export type EmployeeUpsertWithWhereUniqueWithoutDeptInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUncheckedUpdateWithoutDeptInput, EmployeeUpdateWithoutDeptInput>
    create: XOR<EmployeeUncheckedCreateWithoutDeptInput, EmployeeCreateWithoutDeptInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutDeptInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUncheckedUpdateWithoutDeptInput, EmployeeUpdateWithoutDeptInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutDeptInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUncheckedUpdateManyWithoutEmployeeInput, EmployeeUpdateManyMutationInput>
  }

  export type EmployeeScalarWhereInput = {
    AND?: Enumerable<EmployeeScalarWhereInput>
    OR?: Enumerable<EmployeeScalarWhereInput>
    NOT?: Enumerable<EmployeeScalarWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    mobile?: StringFilter | string
    roleDescription?: StringFilter | string
    valid?: BoolFilter | boolean
    depId?: IntFilter | number
  }

  export type EmployeeCreateWithoutLeaveHistoryInput = {
    firstName: string
    lastName: string
    email: string
    mobile: string
    roleDescription: string
    valid?: boolean
    dept: DepartmentCreateNestedOneWithoutEmployeeInput
    Userlogin?: UserloginCreateNestedManyWithoutEmpInput
  }

  export type EmployeeUncheckedCreateWithoutLeaveHistoryInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    mobile: string
    roleDescription: string
    valid?: boolean
    depId: number
    Userlogin?: UserloginUncheckedCreateNestedManyWithoutEmpInput
  }

  export type EmployeeCreateOrConnectWithoutleaveHistoryInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeUncheckedCreateWithoutLeaveHistoryInput, EmployeeCreateWithoutLeaveHistoryInput>
  }

  export type EmployeeUpsertWithoutLeaveHistoryInput = {
    update: XOR<EmployeeUncheckedUpdateWithoutLeaveHistoryInput, EmployeeUpdateWithoutLeaveHistoryInput>
    create: XOR<EmployeeUncheckedCreateWithoutLeaveHistoryInput, EmployeeCreateWithoutLeaveHistoryInput>
  }

  export type EmployeeUpdateWithoutLeaveHistoryInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roleDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    dept?: DepartmentUpdateOneRequiredWithoutEmployeeInput
    Userlogin?: UserloginUpdateManyWithoutEmpInput
  }

  export type EmployeeUncheckedUpdateWithoutLeaveHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roleDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    depId?: IntFieldUpdateOperationsInput | number
    Userlogin?: UserloginUncheckedUpdateManyWithoutEmpInput
  }

  export type LeaveUpdateWithoutEmployeeInput = {
    leaveType?: EnumLeaveTypeFieldUpdateOperationsInput | LeaveType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leaveTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveStatus?: EnumStatusFieldUpdateOperationsInput | Status
    statusTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLeavesLeft?: IntFieldUpdateOperationsInput | number
  }

  export type LeaveUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    leaveType?: EnumLeaveTypeFieldUpdateOperationsInput | LeaveType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leaveTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveStatus?: EnumStatusFieldUpdateOperationsInput | Status
    statusTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLeavesLeft?: IntFieldUpdateOperationsInput | number
  }

  export type LeaveUncheckedUpdateManyWithoutLeaveHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    leaveType?: EnumLeaveTypeFieldUpdateOperationsInput | LeaveType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leaveTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveStatus?: EnumStatusFieldUpdateOperationsInput | Status
    statusTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLeavesLeft?: IntFieldUpdateOperationsInput | number
  }

  export type UserloginUpdateWithoutEmpInput = {
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumERoleFieldUpdateOperationsInput | ERole
  }

  export type UserloginUncheckedUpdateWithoutEmpInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumERoleFieldUpdateOperationsInput | ERole
  }

  export type UserloginUncheckedUpdateManyWithoutUserloginInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumERoleFieldUpdateOperationsInput | ERole
  }

  export type EmployeeUpdateWithoutDeptInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roleDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leaveHistory?: LeaveUpdateManyWithoutEmployeeInput
    Userlogin?: UserloginUpdateManyWithoutEmpInput
  }

  export type EmployeeUncheckedUpdateWithoutDeptInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roleDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leaveHistory?: LeaveUncheckedUpdateManyWithoutEmployeeInput
    Userlogin?: UserloginUncheckedUpdateManyWithoutEmpInput
  }

  export type EmployeeUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roleDescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}