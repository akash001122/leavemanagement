
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';


/**
 * Model userlogin
 */

export type userlogin = {
  id: number
  username: string
  password: string
  role: ERole
  empid: number
}

/**
 * Model employee
 */

export type employee = {
  id: number
  firstname: string
  lastname: string
  email: string
  mobile: string
  roledescription: string
  valid: boolean
  depid: number
}

/**
 * Model department
 */

export type department = {
  id: number
  name: string
  manager: string
  visible: boolean
}

/**
 * Model leave
 */

export type leave = {
  id: number
  employeeid: number
  leavetype: LeaveType
  startdate: Date
  enddate: Date
  leavedescription: string
  valid: boolean
  leavetimestamp: Date
  leavestatus: Status
  statustimestamp: Date | null
  totalleavesleft: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ERole: {
  HR: 'HR',
  MANAGER: 'MANAGER',
  EMPLOYEE: 'EMPLOYEE'
};

export type ERole = (typeof ERole)[keyof typeof ERole]


export const LeaveType: {
  SICK: 'SICK',
  PAID: 'PAID',
  COMPLIMENTARY: 'COMPLIMENTARY',
  LOP: 'LOP',
  EMERGENCY: 'EMERGENCY',
  OTHERS: 'OTHERS'
};

export type LeaveType = (typeof LeaveType)[keyof typeof LeaveType]


export const Status: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type Status = (typeof Status)[keyof typeof Status]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Userlogins
 * const userlogins = await prisma.userlogin.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Userlogins
   * const userlogins = await prisma.userlogin.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.userlogin`: Exposes CRUD operations for the **userlogin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Userlogins
    * const userlogins = await prisma.userlogin.findMany()
    * ```
    */
  get userlogin(): Prisma.userloginDelegate<GlobalReject>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.employeeDelegate<GlobalReject>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.departmentDelegate<GlobalReject>;

  /**
   * `prisma.leave`: Exposes CRUD operations for the **leave** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leaves
    * const leaves = await prisma.leave.findMany()
    * ```
    */
  get leave(): Prisma.leaveDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.16.1
   * Query Engine version: 8b74ad57aaf2cc6c155f382a18a8e3ba95aceb03
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  /**
   * Allows creating `select` or `include` outside of the main statement
   * From https://github.com/prisma/prisma/issues/3372#issuecomment-762296484
   */

  type Cast<A1, A2> = A1 extends A2 ? A1 : A2;

  /**
   * `Exact` forces a type to comply by another type. It will need to be a subset
   * and must have exactly the same properties, no more, no less.
   */
  type Exact<A, W> = A & Cast<{
    [K in keyof A]: K extends keyof W ? A[K] : never
  }, W>;

  type Narrow<A, W = unknown> =
      A & {[K in keyof A]: NarrowAt<A, W, K>};

  type NarrowAt<A, W, K extends keyof A, AK = A[K], WK = Att<W, K>> =
      WK extends Widen<infer T> ? T :
      AK extends Narrowable ? AK & WK :
      Narrow<AK, WK>;

  type Att<O, K> = K extends keyof O ? O[K] : unknown;

  type Widen<A> = {[type]: A};

  type Narrowable =
  | string
  | number
  | bigint
  | boolean
  | [];

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<Narrow<S, V>, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    userlogin: 'userlogin',
    employee: 'employee',
    department: 'department',
    leave: 'leave'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model userlogin
   */


  export type AggregateUserlogin = {
    count: UserloginCountAggregateOutputType | null
    avg: UserloginAvgAggregateOutputType | null
    sum: UserloginSumAggregateOutputType | null
    min: UserloginMinAggregateOutputType | null
    max: UserloginMaxAggregateOutputType | null
  }

  export type UserloginAvgAggregateOutputType = {
    id: number
    empid: number
  }

  export type UserloginSumAggregateOutputType = {
    id: number
    empid: number
  }

  export type UserloginMinAggregateOutputType = {
    id: number
    username: string | null
    password: string | null
    role: ERole | null
    empid: number
  }

  export type UserloginMaxAggregateOutputType = {
    id: number
    username: string | null
    password: string | null
    role: ERole | null
    empid: number
  }

  export type UserloginCountAggregateOutputType = {
    id: number
    username: number | null
    password: number | null
    role: number | null
    empid: number
    _all: number
  }


  export type UserloginAvgAggregateInputType = {
    id?: true
    empid?: true
  }

  export type UserloginSumAggregateInputType = {
    id?: true
    empid?: true
  }

  export type UserloginMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    empid?: true
  }

  export type UserloginMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    empid?: true
  }

  export type UserloginCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    empid?: true
    _all?: true
  }

  export type UserloginAggregateArgs = {
    /**
     * Filter which userlogin to aggregate.
    **/
    where?: userloginWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of userlogins to fetch.
    **/
    orderBy?: Enumerable<userloginOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: userloginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userlogins from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userlogins.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userlogins
    **/
    count?: true | UserloginCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserloginAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserloginSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserloginMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserloginMaxAggregateInputType
  }

  export type GetUserloginAggregateType<T extends UserloginAggregateArgs> = {
    [P in keyof T & keyof AggregateUserlogin]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserlogin[P]>
      : GetScalarType<T[P], AggregateUserlogin[P]>
  }



  export type userloginSelect = {
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    empid?: boolean
    emp?: boolean | employeeArgs
  }

  export type userloginInclude = {
    emp?: boolean | employeeArgs
  }

  export type userloginGetPayload<
    S extends boolean | null | undefined | userloginArgs,
    U = keyof S
      > = S extends true
        ? userlogin
    : S extends undefined
    ? never
    : S extends userloginArgs | userloginFindManyArgs
    ?'include' extends U
    ? userlogin  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'emp'
        ? employeeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof userlogin ?userlogin [P]
  : 
          P extends 'emp'
        ? employeeGetPayload<S['select'][P]> : never
  } 
    : userlogin
  : userlogin


  type userloginCountArgs = Merge<
    Omit<userloginFindManyArgs, 'select' | 'include'> & {
      select?: UserloginCountAggregateInputType | true
    }
  >

  export interface userloginDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Userlogin that matches the filter.
     * @param {userloginFindUniqueArgs} args - Arguments to find a Userlogin
     * @example
     * // Get one Userlogin
     * const userlogin = await prisma.userlogin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userloginFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userloginFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'userlogin'> extends True ? CheckSelect<T, Prisma__userloginClient<userlogin>, Prisma__userloginClient<userloginGetPayload<T>>> : CheckSelect<T, Prisma__userloginClient<userlogin | null >, Prisma__userloginClient<userloginGetPayload<T> | null >>

    /**
     * Find the first Userlogin that matches the filter.
     * @param {userloginFindFirstArgs} args - Arguments to find a Userlogin
     * @example
     * // Get one Userlogin
     * const userlogin = await prisma.userlogin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userloginFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userloginFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'userlogin'> extends True ? CheckSelect<T, Prisma__userloginClient<userlogin>, Prisma__userloginClient<userloginGetPayload<T>>> : CheckSelect<T, Prisma__userloginClient<userlogin | null >, Prisma__userloginClient<userloginGetPayload<T> | null >>

    /**
     * Find zero or more Userlogins that matches the filter.
     * @param {userloginFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Userlogins
     * const userlogins = await prisma.userlogin.findMany()
     * 
     * // Get first 10 Userlogins
     * const userlogins = await prisma.userlogin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userloginWithIdOnly = await prisma.userlogin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userloginFindManyArgs>(
      args?: SelectSubset<T, userloginFindManyArgs>
    ): CheckSelect<T, Promise<Array<userlogin>>, Promise<Array<userloginGetPayload<T>>>>

    /**
     * Create a Userlogin.
     * @param {userloginCreateArgs} args - Arguments to create a Userlogin.
     * @example
     * // Create one Userlogin
     * const Userlogin = await prisma.userlogin.create({
     *   data: {
     *     // ... data to create a Userlogin
     *   }
     * })
     * 
    **/
    create<T extends userloginCreateArgs>(
      args: SelectSubset<T, userloginCreateArgs>
    ): CheckSelect<T, Prisma__userloginClient<userlogin>, Prisma__userloginClient<userloginGetPayload<T>>>

    /**
     * Delete a Userlogin.
     * @param {userloginDeleteArgs} args - Arguments to delete one Userlogin.
     * @example
     * // Delete one Userlogin
     * const Userlogin = await prisma.userlogin.delete({
     *   where: {
     *     // ... filter to delete one Userlogin
     *   }
     * })
     * 
    **/
    delete<T extends userloginDeleteArgs>(
      args: SelectSubset<T, userloginDeleteArgs>
    ): CheckSelect<T, Prisma__userloginClient<userlogin>, Prisma__userloginClient<userloginGetPayload<T>>>

    /**
     * Update one Userlogin.
     * @param {userloginUpdateArgs} args - Arguments to update one Userlogin.
     * @example
     * // Update one Userlogin
     * const userlogin = await prisma.userlogin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userloginUpdateArgs>(
      args: SelectSubset<T, userloginUpdateArgs>
    ): CheckSelect<T, Prisma__userloginClient<userlogin>, Prisma__userloginClient<userloginGetPayload<T>>>

    /**
     * Delete zero or more Userlogins.
     * @param {userloginDeleteManyArgs} args - Arguments to filter Userlogins to delete.
     * @example
     * // Delete a few Userlogins
     * const { count } = await prisma.userlogin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userloginDeleteManyArgs>(
      args?: SelectSubset<T, userloginDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Userlogins.
     * @param {userloginUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Userlogins
     * const userlogin = await prisma.userlogin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userloginUpdateManyArgs>(
      args: SelectSubset<T, userloginUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Userlogin.
     * @param {userloginUpsertArgs} args - Arguments to update or create a Userlogin.
     * @example
     * // Update or create a Userlogin
     * const userlogin = await prisma.userlogin.upsert({
     *   create: {
     *     // ... data to create a Userlogin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Userlogin we want to update
     *   }
     * })
    **/
    upsert<T extends userloginUpsertArgs>(
      args: SelectSubset<T, userloginUpsertArgs>
    ): CheckSelect<T, Prisma__userloginClient<userlogin>, Prisma__userloginClient<userloginGetPayload<T>>>

    /**
     * Count the number of Userlogins.
     * @param {userloginCountArgs} args - Arguments to filter Userlogins to count.
     * @example
     * // Count the number of Userlogins
     * const count = await prisma.userlogin.count({
     *   where: {
     *     // ... the filter for the Userlogins we want to count
     *   }
     * })
    **/
    count<T extends userloginCountArgs>(
      args?: Subset<T, userloginCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserloginCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Userlogin.
     * @param {UserloginAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserloginAggregateArgs>(args: Subset<T, UserloginAggregateArgs>): Promise<GetUserloginAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for userlogin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userloginClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    emp<T extends employeeArgs = {}>(args?: Subset<T, employeeArgs>): CheckSelect<T, Prisma__employeeClient<employee | null >, Prisma__employeeClient<employeeGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * userlogin findUnique
   */
  export type userloginFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the userlogin
    **/
    select?: userloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userloginInclude | null
    /**
     * Throw an Error if a userlogin can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which userlogin to fetch.
    **/
    where: userloginWhereUniqueInput
  }


  /**
   * userlogin findFirst
   */
  export type userloginFindFirstArgs = {
    /**
     * Select specific fields to fetch from the userlogin
    **/
    select?: userloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userloginInclude | null
    /**
     * Throw an Error if a userlogin can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which userlogin to fetch.
    **/
    where?: userloginWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of userlogins to fetch.
    **/
    orderBy?: Enumerable<userloginOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userlogins.
    **/
    cursor?: userloginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userlogins from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userlogins.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of userlogins.
    **/
    distinct?: Enumerable<UserloginScalarFieldEnum>
  }


  /**
   * userlogin findMany
   */
  export type userloginFindManyArgs = {
    /**
     * Select specific fields to fetch from the userlogin
    **/
    select?: userloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userloginInclude | null
    /**
     * Filter, which userlogins to fetch.
    **/
    where?: userloginWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of userlogins to fetch.
    **/
    orderBy?: Enumerable<userloginOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userlogins.
    **/
    cursor?: userloginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userlogins from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userlogins.
    **/
    skip?: number
    distinct?: Enumerable<UserloginScalarFieldEnum>
  }


  /**
   * userlogin create
   */
  export type userloginCreateArgs = {
    /**
     * Select specific fields to fetch from the userlogin
    **/
    select?: userloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userloginInclude | null
    /**
     * The data needed to create a userlogin.
    **/
    data: XOR<userloginUncheckedCreateInput, userloginCreateInput>
  }


  /**
   * userlogin update
   */
  export type userloginUpdateArgs = {
    /**
     * Select specific fields to fetch from the userlogin
    **/
    select?: userloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userloginInclude | null
    /**
     * The data needed to update a userlogin.
    **/
    data: XOR<userloginUncheckedUpdateInput, userloginUpdateInput>
    /**
     * Choose, which userlogin to update.
    **/
    where: userloginWhereUniqueInput
  }


  /**
   * userlogin updateMany
   */
  export type userloginUpdateManyArgs = {
    data: XOR<userloginUncheckedUpdateManyInput, userloginUpdateManyMutationInput>
    where?: userloginWhereInput
  }


  /**
   * userlogin upsert
   */
  export type userloginUpsertArgs = {
    /**
     * Select specific fields to fetch from the userlogin
    **/
    select?: userloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userloginInclude | null
    /**
     * The filter to search for the userlogin to update in case it exists.
    **/
    where: userloginWhereUniqueInput
    /**
     * In case the userlogin found by the `where` argument doesn't exist, create a new userlogin with this data.
    **/
    create: XOR<userloginUncheckedCreateInput, userloginCreateInput>
    /**
     * In case the userlogin was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<userloginUncheckedUpdateInput, userloginUpdateInput>
  }


  /**
   * userlogin delete
   */
  export type userloginDeleteArgs = {
    /**
     * Select specific fields to fetch from the userlogin
    **/
    select?: userloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userloginInclude | null
    /**
     * Filter which userlogin to delete.
    **/
    where: userloginWhereUniqueInput
  }


  /**
   * userlogin deleteMany
   */
  export type userloginDeleteManyArgs = {
    where?: userloginWhereInput
  }


  /**
   * userlogin without action
   */
  export type userloginArgs = {
    /**
     * Select specific fields to fetch from the userlogin
    **/
    select?: userloginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userloginInclude | null
  }



  /**
   * Model employee
   */


  export type AggregateEmployee = {
    count: EmployeeCountAggregateOutputType | null
    avg: EmployeeAvgAggregateOutputType | null
    sum: EmployeeSumAggregateOutputType | null
    min: EmployeeMinAggregateOutputType | null
    max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    id: number
    depid: number
  }

  export type EmployeeSumAggregateOutputType = {
    id: number
    depid: number
  }

  export type EmployeeMinAggregateOutputType = {
    id: number
    firstname: string | null
    lastname: string | null
    email: string | null
    mobile: string | null
    roledescription: string | null
    valid: boolean | null
    depid: number
  }

  export type EmployeeMaxAggregateOutputType = {
    id: number
    firstname: string | null
    lastname: string | null
    email: string | null
    mobile: string | null
    roledescription: string | null
    valid: boolean | null
    depid: number
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    firstname: number | null
    lastname: number | null
    email: number | null
    mobile: number | null
    roledescription: number | null
    valid: number | null
    depid: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    id?: true
    depid?: true
  }

  export type EmployeeSumAggregateInputType = {
    id?: true
    depid?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    mobile?: true
    roledescription?: true
    valid?: true
    depid?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    mobile?: true
    roledescription?: true
    valid?: true
    depid?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    mobile?: true
    roledescription?: true
    valid?: true
    depid?: true
    _all?: true
  }

  export type EmployeeAggregateArgs = {
    /**
     * Filter which employee to aggregate.
    **/
    where?: employeeWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of employees to fetch.
    **/
    orderBy?: Enumerable<employeeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: employeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employees from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employees.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned employees
    **/
    count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
    [P in keyof T & keyof AggregateEmployee]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }



  export type employeeSelect = {
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    mobile?: boolean
    roledescription?: boolean
    valid?: boolean
    depid?: boolean
    dept?: boolean | departmentArgs
    leavehistory?: boolean | leaveFindManyArgs
    userlogin?: boolean | userloginFindManyArgs
  }

  export type employeeInclude = {
    dept?: boolean | departmentArgs
    leavehistory?: boolean | leaveFindManyArgs
    userlogin?: boolean | userloginFindManyArgs
  }

  export type employeeGetPayload<
    S extends boolean | null | undefined | employeeArgs,
    U = keyof S
      > = S extends true
        ? employee
    : S extends undefined
    ? never
    : S extends employeeArgs | employeeFindManyArgs
    ?'include' extends U
    ? employee  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'dept'
        ? departmentGetPayload<S['include'][P]> :
        P extends 'leavehistory'
        ? Array < leaveGetPayload<S['include'][P]>>  :
        P extends 'userlogin'
        ? Array < userloginGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof employee ?employee [P]
  : 
          P extends 'dept'
        ? departmentGetPayload<S['select'][P]> :
        P extends 'leavehistory'
        ? Array < leaveGetPayload<S['select'][P]>>  :
        P extends 'userlogin'
        ? Array < userloginGetPayload<S['select'][P]>>  : never
  } 
    : employee
  : employee


  type employeeCountArgs = Merge<
    Omit<employeeFindManyArgs, 'select' | 'include'> & {
      select?: EmployeeCountAggregateInputType | true
    }
  >

  export interface employeeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Employee that matches the filter.
     * @param {employeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends employeeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, employeeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'employee'> extends True ? CheckSelect<T, Prisma__employeeClient<employee>, Prisma__employeeClient<employeeGetPayload<T>>> : CheckSelect<T, Prisma__employeeClient<employee | null >, Prisma__employeeClient<employeeGetPayload<T> | null >>

    /**
     * Find the first Employee that matches the filter.
     * @param {employeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends employeeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, employeeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'employee'> extends True ? CheckSelect<T, Prisma__employeeClient<employee>, Prisma__employeeClient<employeeGetPayload<T>>> : CheckSelect<T, Prisma__employeeClient<employee | null >, Prisma__employeeClient<employeeGetPayload<T> | null >>

    /**
     * Find zero or more Employees that matches the filter.
     * @param {employeeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends employeeFindManyArgs>(
      args?: SelectSubset<T, employeeFindManyArgs>
    ): CheckSelect<T, Promise<Array<employee>>, Promise<Array<employeeGetPayload<T>>>>

    /**
     * Create a Employee.
     * @param {employeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
    **/
    create<T extends employeeCreateArgs>(
      args: SelectSubset<T, employeeCreateArgs>
    ): CheckSelect<T, Prisma__employeeClient<employee>, Prisma__employeeClient<employeeGetPayload<T>>>

    /**
     * Delete a Employee.
     * @param {employeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
    **/
    delete<T extends employeeDeleteArgs>(
      args: SelectSubset<T, employeeDeleteArgs>
    ): CheckSelect<T, Prisma__employeeClient<employee>, Prisma__employeeClient<employeeGetPayload<T>>>

    /**
     * Update one Employee.
     * @param {employeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends employeeUpdateArgs>(
      args: SelectSubset<T, employeeUpdateArgs>
    ): CheckSelect<T, Prisma__employeeClient<employee>, Prisma__employeeClient<employeeGetPayload<T>>>

    /**
     * Delete zero or more Employees.
     * @param {employeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends employeeDeleteManyArgs>(
      args?: SelectSubset<T, employeeDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Employees.
     * @param {employeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends employeeUpdateManyArgs>(
      args: SelectSubset<T, employeeUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {employeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
    **/
    upsert<T extends employeeUpsertArgs>(
      args: SelectSubset<T, employeeUpsertArgs>
    ): CheckSelect<T, Prisma__employeeClient<employee>, Prisma__employeeClient<employeeGetPayload<T>>>

    /**
     * Count the number of Employees.
     * @param {employeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends employeeCountArgs>(
      args?: Subset<T, employeeCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Promise<GetEmployeeAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__employeeClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    dept<T extends departmentArgs = {}>(args?: Subset<T, departmentArgs>): CheckSelect<T, Prisma__departmentClient<department | null >, Prisma__departmentClient<departmentGetPayload<T> | null >>;

    leavehistory<T extends leaveFindManyArgs = {}>(args?: Subset<T, leaveFindManyArgs>): CheckSelect<T, Promise<Array<leave>>, Promise<Array<leaveGetPayload<T>>>>;

    userlogin<T extends userloginFindManyArgs = {}>(args?: Subset<T, userloginFindManyArgs>): CheckSelect<T, Promise<Array<userlogin>>, Promise<Array<userloginGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * employee findUnique
   */
  export type employeeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the employee
    **/
    select?: employeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: employeeInclude | null
    /**
     * Throw an Error if a employee can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which employee to fetch.
    **/
    where: employeeWhereUniqueInput
  }


  /**
   * employee findFirst
   */
  export type employeeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the employee
    **/
    select?: employeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: employeeInclude | null
    /**
     * Throw an Error if a employee can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which employee to fetch.
    **/
    where?: employeeWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of employees to fetch.
    **/
    orderBy?: Enumerable<employeeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for employees.
    **/
    cursor?: employeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employees from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employees.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of employees.
    **/
    distinct?: Enumerable<EmployeeScalarFieldEnum>
  }


  /**
   * employee findMany
   */
  export type employeeFindManyArgs = {
    /**
     * Select specific fields to fetch from the employee
    **/
    select?: employeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: employeeInclude | null
    /**
     * Filter, which employees to fetch.
    **/
    where?: employeeWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of employees to fetch.
    **/
    orderBy?: Enumerable<employeeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing employees.
    **/
    cursor?: employeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employees from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employees.
    **/
    skip?: number
    distinct?: Enumerable<EmployeeScalarFieldEnum>
  }


  /**
   * employee create
   */
  export type employeeCreateArgs = {
    /**
     * Select specific fields to fetch from the employee
    **/
    select?: employeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: employeeInclude | null
    /**
     * The data needed to create a employee.
    **/
    data: XOR<employeeUncheckedCreateInput, employeeCreateInput>
  }


  /**
   * employee update
   */
  export type employeeUpdateArgs = {
    /**
     * Select specific fields to fetch from the employee
    **/
    select?: employeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: employeeInclude | null
    /**
     * The data needed to update a employee.
    **/
    data: XOR<employeeUncheckedUpdateInput, employeeUpdateInput>
    /**
     * Choose, which employee to update.
    **/
    where: employeeWhereUniqueInput
  }


  /**
   * employee updateMany
   */
  export type employeeUpdateManyArgs = {
    data: XOR<employeeUncheckedUpdateManyInput, employeeUpdateManyMutationInput>
    where?: employeeWhereInput
  }


  /**
   * employee upsert
   */
  export type employeeUpsertArgs = {
    /**
     * Select specific fields to fetch from the employee
    **/
    select?: employeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: employeeInclude | null
    /**
     * The filter to search for the employee to update in case it exists.
    **/
    where: employeeWhereUniqueInput
    /**
     * In case the employee found by the `where` argument doesn't exist, create a new employee with this data.
    **/
    create: XOR<employeeUncheckedCreateInput, employeeCreateInput>
    /**
     * In case the employee was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<employeeUncheckedUpdateInput, employeeUpdateInput>
  }


  /**
   * employee delete
   */
  export type employeeDeleteArgs = {
    /**
     * Select specific fields to fetch from the employee
    **/
    select?: employeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: employeeInclude | null
    /**
     * Filter which employee to delete.
    **/
    where: employeeWhereUniqueInput
  }


  /**
   * employee deleteMany
   */
  export type employeeDeleteManyArgs = {
    where?: employeeWhereInput
  }


  /**
   * employee without action
   */
  export type employeeArgs = {
    /**
     * Select specific fields to fetch from the employee
    **/
    select?: employeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: employeeInclude | null
  }



  /**
   * Model department
   */


  export type AggregateDepartment = {
    count: DepartmentCountAggregateOutputType | null
    avg: DepartmentAvgAggregateOutputType | null
    sum: DepartmentSumAggregateOutputType | null
    min: DepartmentMinAggregateOutputType | null
    max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    id: number
  }

  export type DepartmentSumAggregateOutputType = {
    id: number
  }

  export type DepartmentMinAggregateOutputType = {
    id: number
    name: string | null
    manager: string | null
    visible: boolean | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: number
    name: string | null
    manager: string | null
    visible: boolean | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number | null
    manager: number | null
    visible: number | null
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    id?: true
  }

  export type DepartmentSumAggregateInputType = {
    id?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    manager?: true
    visible?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    manager?: true
    visible?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    manager?: true
    visible?: true
    _all?: true
  }

  export type DepartmentAggregateArgs = {
    /**
     * Filter which department to aggregate.
    **/
    where?: departmentWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of departments to fetch.
    **/
    orderBy?: Enumerable<departmentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: departmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` departments from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` departments.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned departments
    **/
    count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
    [P in keyof T & keyof AggregateDepartment]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }



  export type departmentSelect = {
    id?: boolean
    name?: boolean
    manager?: boolean
    visible?: boolean
    employee?: boolean | employeeFindManyArgs
  }

  export type departmentInclude = {
    employee?: boolean | employeeFindManyArgs
  }

  export type departmentGetPayload<
    S extends boolean | null | undefined | departmentArgs,
    U = keyof S
      > = S extends true
        ? department
    : S extends undefined
    ? never
    : S extends departmentArgs | departmentFindManyArgs
    ?'include' extends U
    ? department  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'employee'
        ? Array < employeeGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof department ?department [P]
  : 
          P extends 'employee'
        ? Array < employeeGetPayload<S['select'][P]>>  : never
  } 
    : department
  : department


  type departmentCountArgs = Merge<
    Omit<departmentFindManyArgs, 'select' | 'include'> & {
      select?: DepartmentCountAggregateInputType | true
    }
  >

  export interface departmentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Department that matches the filter.
     * @param {departmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends departmentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, departmentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'department'> extends True ? CheckSelect<T, Prisma__departmentClient<department>, Prisma__departmentClient<departmentGetPayload<T>>> : CheckSelect<T, Prisma__departmentClient<department | null >, Prisma__departmentClient<departmentGetPayload<T> | null >>

    /**
     * Find the first Department that matches the filter.
     * @param {departmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends departmentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, departmentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'department'> extends True ? CheckSelect<T, Prisma__departmentClient<department>, Prisma__departmentClient<departmentGetPayload<T>>> : CheckSelect<T, Prisma__departmentClient<department | null >, Prisma__departmentClient<departmentGetPayload<T> | null >>

    /**
     * Find zero or more Departments that matches the filter.
     * @param {departmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends departmentFindManyArgs>(
      args?: SelectSubset<T, departmentFindManyArgs>
    ): CheckSelect<T, Promise<Array<department>>, Promise<Array<departmentGetPayload<T>>>>

    /**
     * Create a Department.
     * @param {departmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
    **/
    create<T extends departmentCreateArgs>(
      args: SelectSubset<T, departmentCreateArgs>
    ): CheckSelect<T, Prisma__departmentClient<department>, Prisma__departmentClient<departmentGetPayload<T>>>

    /**
     * Delete a Department.
     * @param {departmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
    **/
    delete<T extends departmentDeleteArgs>(
      args: SelectSubset<T, departmentDeleteArgs>
    ): CheckSelect<T, Prisma__departmentClient<department>, Prisma__departmentClient<departmentGetPayload<T>>>

    /**
     * Update one Department.
     * @param {departmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends departmentUpdateArgs>(
      args: SelectSubset<T, departmentUpdateArgs>
    ): CheckSelect<T, Prisma__departmentClient<department>, Prisma__departmentClient<departmentGetPayload<T>>>

    /**
     * Delete zero or more Departments.
     * @param {departmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends departmentDeleteManyArgs>(
      args?: SelectSubset<T, departmentDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Departments.
     * @param {departmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends departmentUpdateManyArgs>(
      args: SelectSubset<T, departmentUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {departmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
    **/
    upsert<T extends departmentUpsertArgs>(
      args: SelectSubset<T, departmentUpsertArgs>
    ): CheckSelect<T, Prisma__departmentClient<department>, Prisma__departmentClient<departmentGetPayload<T>>>

    /**
     * Count the number of Departments.
     * @param {departmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends departmentCountArgs>(
      args?: Subset<T, departmentCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Promise<GetDepartmentAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__departmentClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    employee<T extends employeeFindManyArgs = {}>(args?: Subset<T, employeeFindManyArgs>): CheckSelect<T, Promise<Array<employee>>, Promise<Array<employeeGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * department findUnique
   */
  export type departmentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the department
    **/
    select?: departmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: departmentInclude | null
    /**
     * Throw an Error if a department can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which department to fetch.
    **/
    where: departmentWhereUniqueInput
  }


  /**
   * department findFirst
   */
  export type departmentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the department
    **/
    select?: departmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: departmentInclude | null
    /**
     * Throw an Error if a department can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which department to fetch.
    **/
    where?: departmentWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of departments to fetch.
    **/
    orderBy?: Enumerable<departmentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for departments.
    **/
    cursor?: departmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` departments from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` departments.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of departments.
    **/
    distinct?: Enumerable<DepartmentScalarFieldEnum>
  }


  /**
   * department findMany
   */
  export type departmentFindManyArgs = {
    /**
     * Select specific fields to fetch from the department
    **/
    select?: departmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: departmentInclude | null
    /**
     * Filter, which departments to fetch.
    **/
    where?: departmentWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of departments to fetch.
    **/
    orderBy?: Enumerable<departmentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing departments.
    **/
    cursor?: departmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` departments from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` departments.
    **/
    skip?: number
    distinct?: Enumerable<DepartmentScalarFieldEnum>
  }


  /**
   * department create
   */
  export type departmentCreateArgs = {
    /**
     * Select specific fields to fetch from the department
    **/
    select?: departmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: departmentInclude | null
    /**
     * The data needed to create a department.
    **/
    data: XOR<departmentUncheckedCreateInput, departmentCreateInput>
  }


  /**
   * department update
   */
  export type departmentUpdateArgs = {
    /**
     * Select specific fields to fetch from the department
    **/
    select?: departmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: departmentInclude | null
    /**
     * The data needed to update a department.
    **/
    data: XOR<departmentUncheckedUpdateInput, departmentUpdateInput>
    /**
     * Choose, which department to update.
    **/
    where: departmentWhereUniqueInput
  }


  /**
   * department updateMany
   */
  export type departmentUpdateManyArgs = {
    data: XOR<departmentUncheckedUpdateManyInput, departmentUpdateManyMutationInput>
    where?: departmentWhereInput
  }


  /**
   * department upsert
   */
  export type departmentUpsertArgs = {
    /**
     * Select specific fields to fetch from the department
    **/
    select?: departmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: departmentInclude | null
    /**
     * The filter to search for the department to update in case it exists.
    **/
    where: departmentWhereUniqueInput
    /**
     * In case the department found by the `where` argument doesn't exist, create a new department with this data.
    **/
    create: XOR<departmentUncheckedCreateInput, departmentCreateInput>
    /**
     * In case the department was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<departmentUncheckedUpdateInput, departmentUpdateInput>
  }


  /**
   * department delete
   */
  export type departmentDeleteArgs = {
    /**
     * Select specific fields to fetch from the department
    **/
    select?: departmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: departmentInclude | null
    /**
     * Filter which department to delete.
    **/
    where: departmentWhereUniqueInput
  }


  /**
   * department deleteMany
   */
  export type departmentDeleteManyArgs = {
    where?: departmentWhereInput
  }


  /**
   * department without action
   */
  export type departmentArgs = {
    /**
     * Select specific fields to fetch from the department
    **/
    select?: departmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: departmentInclude | null
  }



  /**
   * Model leave
   */


  export type AggregateLeave = {
    count: LeaveCountAggregateOutputType | null
    avg: LeaveAvgAggregateOutputType | null
    sum: LeaveSumAggregateOutputType | null
    min: LeaveMinAggregateOutputType | null
    max: LeaveMaxAggregateOutputType | null
  }

  export type LeaveAvgAggregateOutputType = {
    id: number
    employeeid: number
    totalleavesleft: number
  }

  export type LeaveSumAggregateOutputType = {
    id: number
    employeeid: number
    totalleavesleft: number
  }

  export type LeaveMinAggregateOutputType = {
    id: number
    employeeid: number
    leavetype: LeaveType | null
    startdate: Date | null
    enddate: Date | null
    leavedescription: string | null
    valid: boolean | null
    leavetimestamp: Date | null
    leavestatus: Status | null
    statustimestamp: Date | null
    totalleavesleft: number
  }

  export type LeaveMaxAggregateOutputType = {
    id: number
    employeeid: number
    leavetype: LeaveType | null
    startdate: Date | null
    enddate: Date | null
    leavedescription: string | null
    valid: boolean | null
    leavetimestamp: Date | null
    leavestatus: Status | null
    statustimestamp: Date | null
    totalleavesleft: number
  }

  export type LeaveCountAggregateOutputType = {
    id: number
    employeeid: number
    leavetype: number | null
    startdate: number | null
    enddate: number | null
    leavedescription: number | null
    valid: number | null
    leavetimestamp: number | null
    leavestatus: number | null
    statustimestamp: number | null
    totalleavesleft: number
    _all: number
  }


  export type LeaveAvgAggregateInputType = {
    id?: true
    employeeid?: true
    totalleavesleft?: true
  }

  export type LeaveSumAggregateInputType = {
    id?: true
    employeeid?: true
    totalleavesleft?: true
  }

  export type LeaveMinAggregateInputType = {
    id?: true
    employeeid?: true
    leavetype?: true
    startdate?: true
    enddate?: true
    leavedescription?: true
    valid?: true
    leavetimestamp?: true
    leavestatus?: true
    statustimestamp?: true
    totalleavesleft?: true
  }

  export type LeaveMaxAggregateInputType = {
    id?: true
    employeeid?: true
    leavetype?: true
    startdate?: true
    enddate?: true
    leavedescription?: true
    valid?: true
    leavetimestamp?: true
    leavestatus?: true
    statustimestamp?: true
    totalleavesleft?: true
  }

  export type LeaveCountAggregateInputType = {
    id?: true
    employeeid?: true
    leavetype?: true
    startdate?: true
    enddate?: true
    leavedescription?: true
    valid?: true
    leavetimestamp?: true
    leavestatus?: true
    statustimestamp?: true
    totalleavesleft?: true
    _all?: true
  }

  export type LeaveAggregateArgs = {
    /**
     * Filter which leave to aggregate.
    **/
    where?: leaveWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of leaves to fetch.
    **/
    orderBy?: Enumerable<leaveOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: leaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leaves from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leaves.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned leaves
    **/
    count?: true | LeaveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: LeaveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: LeaveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: LeaveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: LeaveMaxAggregateInputType
  }

  export type GetLeaveAggregateType<T extends LeaveAggregateArgs> = {
    [P in keyof T & keyof AggregateLeave]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeave[P]>
      : GetScalarType<T[P], AggregateLeave[P]>
  }



  export type leaveSelect = {
    id?: boolean
    employeeid?: boolean
    leavetype?: boolean
    startdate?: boolean
    enddate?: boolean
    leavedescription?: boolean
    valid?: boolean
    leavetimestamp?: boolean
    leavestatus?: boolean
    statustimestamp?: boolean
    totalleavesleft?: boolean
    employee?: boolean | employeeArgs
  }

  export type leaveInclude = {
    employee?: boolean | employeeArgs
  }

  export type leaveGetPayload<
    S extends boolean | null | undefined | leaveArgs,
    U = keyof S
      > = S extends true
        ? leave
    : S extends undefined
    ? never
    : S extends leaveArgs | leaveFindManyArgs
    ?'include' extends U
    ? leave  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'employee'
        ? employeeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof leave ?leave [P]
  : 
          P extends 'employee'
        ? employeeGetPayload<S['select'][P]> : never
  } 
    : leave
  : leave


  type leaveCountArgs = Merge<
    Omit<leaveFindManyArgs, 'select' | 'include'> & {
      select?: LeaveCountAggregateInputType | true
    }
  >

  export interface leaveDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Leave that matches the filter.
     * @param {leaveFindUniqueArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends leaveFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, leaveFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'leave'> extends True ? CheckSelect<T, Prisma__leaveClient<leave>, Prisma__leaveClient<leaveGetPayload<T>>> : CheckSelect<T, Prisma__leaveClient<leave | null >, Prisma__leaveClient<leaveGetPayload<T> | null >>

    /**
     * Find the first Leave that matches the filter.
     * @param {leaveFindFirstArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends leaveFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, leaveFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'leave'> extends True ? CheckSelect<T, Prisma__leaveClient<leave>, Prisma__leaveClient<leaveGetPayload<T>>> : CheckSelect<T, Prisma__leaveClient<leave | null >, Prisma__leaveClient<leaveGetPayload<T> | null >>

    /**
     * Find zero or more Leaves that matches the filter.
     * @param {leaveFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leaves
     * const leaves = await prisma.leave.findMany()
     * 
     * // Get first 10 Leaves
     * const leaves = await prisma.leave.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaveWithIdOnly = await prisma.leave.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends leaveFindManyArgs>(
      args?: SelectSubset<T, leaveFindManyArgs>
    ): CheckSelect<T, Promise<Array<leave>>, Promise<Array<leaveGetPayload<T>>>>

    /**
     * Create a Leave.
     * @param {leaveCreateArgs} args - Arguments to create a Leave.
     * @example
     * // Create one Leave
     * const Leave = await prisma.leave.create({
     *   data: {
     *     // ... data to create a Leave
     *   }
     * })
     * 
    **/
    create<T extends leaveCreateArgs>(
      args: SelectSubset<T, leaveCreateArgs>
    ): CheckSelect<T, Prisma__leaveClient<leave>, Prisma__leaveClient<leaveGetPayload<T>>>

    /**
     * Delete a Leave.
     * @param {leaveDeleteArgs} args - Arguments to delete one Leave.
     * @example
     * // Delete one Leave
     * const Leave = await prisma.leave.delete({
     *   where: {
     *     // ... filter to delete one Leave
     *   }
     * })
     * 
    **/
    delete<T extends leaveDeleteArgs>(
      args: SelectSubset<T, leaveDeleteArgs>
    ): CheckSelect<T, Prisma__leaveClient<leave>, Prisma__leaveClient<leaveGetPayload<T>>>

    /**
     * Update one Leave.
     * @param {leaveUpdateArgs} args - Arguments to update one Leave.
     * @example
     * // Update one Leave
     * const leave = await prisma.leave.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends leaveUpdateArgs>(
      args: SelectSubset<T, leaveUpdateArgs>
    ): CheckSelect<T, Prisma__leaveClient<leave>, Prisma__leaveClient<leaveGetPayload<T>>>

    /**
     * Delete zero or more Leaves.
     * @param {leaveDeleteManyArgs} args - Arguments to filter Leaves to delete.
     * @example
     * // Delete a few Leaves
     * const { count } = await prisma.leave.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends leaveDeleteManyArgs>(
      args?: SelectSubset<T, leaveDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Leaves.
     * @param {leaveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leaves
     * const leave = await prisma.leave.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends leaveUpdateManyArgs>(
      args: SelectSubset<T, leaveUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Leave.
     * @param {leaveUpsertArgs} args - Arguments to update or create a Leave.
     * @example
     * // Update or create a Leave
     * const leave = await prisma.leave.upsert({
     *   create: {
     *     // ... data to create a Leave
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Leave we want to update
     *   }
     * })
    **/
    upsert<T extends leaveUpsertArgs>(
      args: SelectSubset<T, leaveUpsertArgs>
    ): CheckSelect<T, Prisma__leaveClient<leave>, Prisma__leaveClient<leaveGetPayload<T>>>

    /**
     * Count the number of Leaves.
     * @param {leaveCountArgs} args - Arguments to filter Leaves to count.
     * @example
     * // Count the number of Leaves
     * const count = await prisma.leave.count({
     *   where: {
     *     // ... the filter for the Leaves we want to count
     *   }
     * })
    **/
    count<T extends leaveCountArgs>(
      args?: Subset<T, leaveCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Leave.
     * @param {LeaveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveAggregateArgs>(args: Subset<T, LeaveAggregateArgs>): Promise<GetLeaveAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for leave.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__leaveClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    employee<T extends employeeArgs = {}>(args?: Subset<T, employeeArgs>): CheckSelect<T, Prisma__employeeClient<employee | null >, Prisma__employeeClient<employeeGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * leave findUnique
   */
  export type leaveFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the leave
    **/
    select?: leaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: leaveInclude | null
    /**
     * Throw an Error if a leave can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which leave to fetch.
    **/
    where: leaveWhereUniqueInput
  }


  /**
   * leave findFirst
   */
  export type leaveFindFirstArgs = {
    /**
     * Select specific fields to fetch from the leave
    **/
    select?: leaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: leaveInclude | null
    /**
     * Throw an Error if a leave can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which leave to fetch.
    **/
    where?: leaveWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of leaves to fetch.
    **/
    orderBy?: Enumerable<leaveOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for leaves.
    **/
    cursor?: leaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leaves from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leaves.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of leaves.
    **/
    distinct?: Enumerable<LeaveScalarFieldEnum>
  }


  /**
   * leave findMany
   */
  export type leaveFindManyArgs = {
    /**
     * Select specific fields to fetch from the leave
    **/
    select?: leaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: leaveInclude | null
    /**
     * Filter, which leaves to fetch.
    **/
    where?: leaveWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of leaves to fetch.
    **/
    orderBy?: Enumerable<leaveOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing leaves.
    **/
    cursor?: leaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leaves from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leaves.
    **/
    skip?: number
    distinct?: Enumerable<LeaveScalarFieldEnum>
  }


  /**
   * leave create
   */
  export type leaveCreateArgs = {
    /**
     * Select specific fields to fetch from the leave
    **/
    select?: leaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: leaveInclude | null
    /**
     * The data needed to create a leave.
    **/
    data: XOR<leaveUncheckedCreateInput, leaveCreateInput>
  }


  /**
   * leave update
   */
  export type leaveUpdateArgs = {
    /**
     * Select specific fields to fetch from the leave
    **/
    select?: leaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: leaveInclude | null
    /**
     * The data needed to update a leave.
    **/
    data: XOR<leaveUncheckedUpdateInput, leaveUpdateInput>
    /**
     * Choose, which leave to update.
    **/
    where: leaveWhereUniqueInput
  }


  /**
   * leave updateMany
   */
  export type leaveUpdateManyArgs = {
    data: XOR<leaveUncheckedUpdateManyInput, leaveUpdateManyMutationInput>
    where?: leaveWhereInput
  }


  /**
   * leave upsert
   */
  export type leaveUpsertArgs = {
    /**
     * Select specific fields to fetch from the leave
    **/
    select?: leaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: leaveInclude | null
    /**
     * The filter to search for the leave to update in case it exists.
    **/
    where: leaveWhereUniqueInput
    /**
     * In case the leave found by the `where` argument doesn't exist, create a new leave with this data.
    **/
    create: XOR<leaveUncheckedCreateInput, leaveCreateInput>
    /**
     * In case the leave was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<leaveUncheckedUpdateInput, leaveUpdateInput>
  }


  /**
   * leave delete
   */
  export type leaveDeleteArgs = {
    /**
     * Select specific fields to fetch from the leave
    **/
    select?: leaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: leaveInclude | null
    /**
     * Filter which leave to delete.
    **/
    where: leaveWhereUniqueInput
  }


  /**
   * leave deleteMany
   */
  export type leaveDeleteManyArgs = {
    where?: leaveWhereInput
  }


  /**
   * leave without action
   */
  export type leaveArgs = {
    /**
     * Select specific fields to fetch from the leave
    **/
    select?: leaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: leaveInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserloginScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    role: 'role',
    empid: 'empid'
  };

  export type UserloginScalarFieldEnum = (typeof UserloginScalarFieldEnum)[keyof typeof UserloginScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    lastname: 'lastname',
    email: 'email',
    mobile: 'mobile',
    roledescription: 'roledescription',
    valid: 'valid',
    depid: 'depid'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    manager: 'manager',
    visible: 'visible'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const LeaveScalarFieldEnum: {
    id: 'id',
    employeeid: 'employeeid',
    leavetype: 'leavetype',
    startdate: 'startdate',
    enddate: 'enddate',
    leavedescription: 'leavedescription',
    valid: 'valid',
    leavetimestamp: 'leavetimestamp',
    leavestatus: 'leavestatus',
    statustimestamp: 'statustimestamp',
    totalleavesleft: 'totalleavesleft'
  };

  export type LeaveScalarFieldEnum = (typeof LeaveScalarFieldEnum)[keyof typeof LeaveScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type userloginWhereInput = {
    AND?: Enumerable<userloginWhereInput>
    OR?: Enumerable<userloginWhereInput>
    NOT?: Enumerable<userloginWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    password?: StringFilter | string
    role?: EnumERoleFilter | ERole
    empid?: IntFilter | number
    emp?: XOR<employeeWhereInput, EmployeeRelationFilter>
  }

  export type userloginOrderByInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    empid?: SortOrder
    emp?: employeeOrderByInput
  }

  export type userloginWhereUniqueInput = {
    id?: number
    username?: string
  }

  export type employeeWhereInput = {
    AND?: Enumerable<employeeWhereInput>
    OR?: Enumerable<employeeWhereInput>
    NOT?: Enumerable<employeeWhereInput>
    id?: IntFilter | number
    firstname?: StringFilter | string
    lastname?: StringFilter | string
    email?: StringFilter | string
    mobile?: StringFilter | string
    roledescription?: StringFilter | string
    valid?: BoolFilter | boolean
    depid?: IntFilter | number
    dept?: XOR<departmentWhereInput, DepartmentRelationFilter>
    leavehistory?: LeaveListRelationFilter
    userlogin?: UserloginListRelationFilter
  }

  export type employeeOrderByInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    roledescription?: SortOrder
    valid?: SortOrder
    depid?: SortOrder
    dept?: departmentOrderByInput
  }

  export type employeeWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type departmentWhereInput = {
    AND?: Enumerable<departmentWhereInput>
    OR?: Enumerable<departmentWhereInput>
    NOT?: Enumerable<departmentWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    manager?: StringFilter | string
    visible?: BoolFilter | boolean
    employee?: EmployeeListRelationFilter
  }

  export type departmentOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    manager?: SortOrder
    visible?: SortOrder
  }

  export type departmentWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type leaveWhereInput = {
    AND?: Enumerable<leaveWhereInput>
    OR?: Enumerable<leaveWhereInput>
    NOT?: Enumerable<leaveWhereInput>
    id?: IntFilter | number
    employeeid?: IntFilter | number
    leavetype?: EnumLeaveTypeFilter | LeaveType
    startdate?: DateTimeFilter | Date | string
    enddate?: DateTimeFilter | Date | string
    leavedescription?: StringFilter | string
    valid?: BoolFilter | boolean
    leavetimestamp?: DateTimeFilter | Date | string
    leavestatus?: EnumStatusFilter | Status
    statustimestamp?: DateTimeNullableFilter | Date | string | null
    totalleavesleft?: IntFilter | number
    employee?: XOR<employeeWhereInput, EmployeeRelationFilter>
  }

  export type leaveOrderByInput = {
    id?: SortOrder
    employeeid?: SortOrder
    leavetype?: SortOrder
    startdate?: SortOrder
    enddate?: SortOrder
    leavedescription?: SortOrder
    valid?: SortOrder
    leavetimestamp?: SortOrder
    leavestatus?: SortOrder
    statustimestamp?: SortOrder
    totalleavesleft?: SortOrder
    employee?: employeeOrderByInput
  }

  export type leaveWhereUniqueInput = {
    id?: number
  }

  export type userloginCreateInput = {
    username: string
    password: string
    role?: ERole
    emp: employeeCreateNestedOneWithoutUserloginInput
  }

  export type userloginUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    role?: ERole
    empid: number
  }

  export type userloginUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumERoleFieldUpdateOperationsInput | ERole
    emp?: employeeUpdateOneRequiredWithoutUserloginInput
  }

  export type userloginUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumERoleFieldUpdateOperationsInput | ERole
    empid?: IntFieldUpdateOperationsInput | number
  }

  export type userloginUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumERoleFieldUpdateOperationsInput | ERole
  }

  export type userloginUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumERoleFieldUpdateOperationsInput | ERole
    empid?: IntFieldUpdateOperationsInput | number
  }

  export type employeeCreateInput = {
    firstname: string
    lastname: string
    email: string
    mobile: string
    roledescription: string
    valid?: boolean
    dept: departmentCreateNestedOneWithoutEmployeeInput
    leavehistory?: leaveCreateNestedManyWithoutEmployeeInput
    userlogin?: userloginCreateNestedManyWithoutEmpInput
  }

  export type employeeUncheckedCreateInput = {
    id?: number
    firstname: string
    lastname: string
    email: string
    mobile: string
    roledescription: string
    valid?: boolean
    depid: number
    leavehistory?: leaveUncheckedCreateNestedManyWithoutEmployeeInput
    userlogin?: userloginUncheckedCreateNestedManyWithoutEmpInput
  }

  export type employeeUpdateInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roledescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    dept?: departmentUpdateOneRequiredWithoutEmployeeInput
    leavehistory?: leaveUpdateManyWithoutEmployeeInput
    userlogin?: userloginUpdateManyWithoutEmpInput
  }

  export type employeeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roledescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    depid?: IntFieldUpdateOperationsInput | number
    leavehistory?: leaveUncheckedUpdateManyWithoutEmployeeInput
    userlogin?: userloginUncheckedUpdateManyWithoutEmpInput
  }

  export type employeeUpdateManyMutationInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roledescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type employeeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roledescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    depid?: IntFieldUpdateOperationsInput | number
  }

  export type departmentCreateInput = {
    name: string
    manager: string
    visible?: boolean
    employee?: employeeCreateNestedManyWithoutDeptInput
  }

  export type departmentUncheckedCreateInput = {
    id?: number
    name: string
    manager: string
    visible?: boolean
    employee?: employeeUncheckedCreateNestedManyWithoutDeptInput
  }

  export type departmentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    employee?: employeeUpdateManyWithoutDeptInput
  }

  export type departmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    employee?: employeeUncheckedUpdateManyWithoutDeptInput
  }

  export type departmentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type departmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type leaveCreateInput = {
    leavetype?: LeaveType
    startdate: Date | string
    enddate: Date | string
    leavedescription: string
    valid?: boolean
    leavetimestamp?: Date | string
    leavestatus?: Status
    statustimestamp?: Date | string | null
    totalleavesleft?: number
    employee: employeeCreateNestedOneWithoutLeavehistoryInput
  }

  export type leaveUncheckedCreateInput = {
    id?: number
    employeeid: number
    leavetype?: LeaveType
    startdate: Date | string
    enddate: Date | string
    leavedescription: string
    valid?: boolean
    leavetimestamp?: Date | string
    leavestatus?: Status
    statustimestamp?: Date | string | null
    totalleavesleft?: number
  }

  export type leaveUpdateInput = {
    leavetype?: EnumLeaveTypeFieldUpdateOperationsInput | LeaveType
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavedescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leavetimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    leavestatus?: EnumStatusFieldUpdateOperationsInput | Status
    statustimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalleavesleft?: IntFieldUpdateOperationsInput | number
    employee?: employeeUpdateOneRequiredWithoutLeavehistoryInput
  }

  export type leaveUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeid?: IntFieldUpdateOperationsInput | number
    leavetype?: EnumLeaveTypeFieldUpdateOperationsInput | LeaveType
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavedescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leavetimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    leavestatus?: EnumStatusFieldUpdateOperationsInput | Status
    statustimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalleavesleft?: IntFieldUpdateOperationsInput | number
  }

  export type leaveUpdateManyMutationInput = {
    leavetype?: EnumLeaveTypeFieldUpdateOperationsInput | LeaveType
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavedescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leavetimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    leavestatus?: EnumStatusFieldUpdateOperationsInput | Status
    statustimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalleavesleft?: IntFieldUpdateOperationsInput | number
  }

  export type leaveUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeid?: IntFieldUpdateOperationsInput | number
    leavetype?: EnumLeaveTypeFieldUpdateOperationsInput | LeaveType
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavedescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leavetimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    leavestatus?: EnumStatusFieldUpdateOperationsInput | Status
    statustimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalleavesleft?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type EnumERoleFilter = {
    equals?: ERole
    in?: Enumerable<ERole>
    notIn?: Enumerable<ERole>
    not?: NestedEnumERoleFilter | ERole
  }

  export type EmployeeRelationFilter = {
    is?: employeeWhereInput
    isNot?: employeeWhereInput
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DepartmentRelationFilter = {
    is?: departmentWhereInput
    isNot?: departmentWhereInput
  }

  export type LeaveListRelationFilter = {
    every?: leaveWhereInput
    some?: leaveWhereInput
    none?: leaveWhereInput
  }

  export type UserloginListRelationFilter = {
    every?: userloginWhereInput
    some?: userloginWhereInput
    none?: userloginWhereInput
  }

  export type EmployeeListRelationFilter = {
    every?: employeeWhereInput
    some?: employeeWhereInput
    none?: employeeWhereInput
  }

  export type EnumLeaveTypeFilter = {
    equals?: LeaveType
    in?: Enumerable<LeaveType>
    notIn?: Enumerable<LeaveType>
    not?: NestedEnumLeaveTypeFilter | LeaveType
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EnumStatusFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusFilter | Status
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type employeeCreateNestedOneWithoutUserloginInput = {
    create?: XOR<employeeUncheckedCreateWithoutUserloginInput, employeeCreateWithoutUserloginInput>
    connectOrCreate?: employeeCreateOrConnectWithoutuserloginInput
    connect?: employeeWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumERoleFieldUpdateOperationsInput = {
    set?: ERole
  }

  export type employeeUpdateOneRequiredWithoutUserloginInput = {
    create?: XOR<employeeUncheckedCreateWithoutUserloginInput, employeeCreateWithoutUserloginInput>
    connectOrCreate?: employeeCreateOrConnectWithoutuserloginInput
    upsert?: employeeUpsertWithoutUserloginInput
    connect?: employeeWhereUniqueInput
    update?: XOR<employeeUncheckedUpdateWithoutUserloginInput, employeeUpdateWithoutUserloginInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type departmentCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<departmentUncheckedCreateWithoutEmployeeInput, departmentCreateWithoutEmployeeInput>
    connectOrCreate?: departmentCreateOrConnectWithoutemployeeInput
    connect?: departmentWhereUniqueInput
  }

  export type leaveCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<leaveUncheckedCreateWithoutEmployeeInput>, Enumerable<leaveCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<leaveCreateOrConnectWithoutemployeeInput>
    connect?: Enumerable<leaveWhereUniqueInput>
  }

  export type userloginCreateNestedManyWithoutEmpInput = {
    create?: XOR<Enumerable<userloginUncheckedCreateWithoutEmpInput>, Enumerable<userloginCreateWithoutEmpInput>>
    connectOrCreate?: Enumerable<userloginCreateOrConnectWithoutempInput>
    connect?: Enumerable<userloginWhereUniqueInput>
  }

  export type leaveUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<leaveUncheckedCreateWithoutEmployeeInput>, Enumerable<leaveCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<leaveCreateOrConnectWithoutemployeeInput>
    connect?: Enumerable<leaveWhereUniqueInput>
  }

  export type userloginUncheckedCreateNestedManyWithoutEmpInput = {
    create?: XOR<Enumerable<userloginUncheckedCreateWithoutEmpInput>, Enumerable<userloginCreateWithoutEmpInput>>
    connectOrCreate?: Enumerable<userloginCreateOrConnectWithoutempInput>
    connect?: Enumerable<userloginWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type departmentUpdateOneRequiredWithoutEmployeeInput = {
    create?: XOR<departmentUncheckedCreateWithoutEmployeeInput, departmentCreateWithoutEmployeeInput>
    connectOrCreate?: departmentCreateOrConnectWithoutemployeeInput
    upsert?: departmentUpsertWithoutEmployeeInput
    connect?: departmentWhereUniqueInput
    update?: XOR<departmentUncheckedUpdateWithoutEmployeeInput, departmentUpdateWithoutEmployeeInput>
  }

  export type leaveUpdateManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<leaveUncheckedCreateWithoutEmployeeInput>, Enumerable<leaveCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<leaveCreateOrConnectWithoutemployeeInput>
    upsert?: Enumerable<leaveUpsertWithWhereUniqueWithoutEmployeeInput>
    connect?: Enumerable<leaveWhereUniqueInput>
    set?: Enumerable<leaveWhereUniqueInput>
    disconnect?: Enumerable<leaveWhereUniqueInput>
    delete?: Enumerable<leaveWhereUniqueInput>
    update?: Enumerable<leaveUpdateWithWhereUniqueWithoutEmployeeInput>
    updateMany?: Enumerable<leaveUpdateManyWithWhereWithoutEmployeeInput>
    deleteMany?: Enumerable<leaveScalarWhereInput>
  }

  export type userloginUpdateManyWithoutEmpInput = {
    create?: XOR<Enumerable<userloginUncheckedCreateWithoutEmpInput>, Enumerable<userloginCreateWithoutEmpInput>>
    connectOrCreate?: Enumerable<userloginCreateOrConnectWithoutempInput>
    upsert?: Enumerable<userloginUpsertWithWhereUniqueWithoutEmpInput>
    connect?: Enumerable<userloginWhereUniqueInput>
    set?: Enumerable<userloginWhereUniqueInput>
    disconnect?: Enumerable<userloginWhereUniqueInput>
    delete?: Enumerable<userloginWhereUniqueInput>
    update?: Enumerable<userloginUpdateWithWhereUniqueWithoutEmpInput>
    updateMany?: Enumerable<userloginUpdateManyWithWhereWithoutEmpInput>
    deleteMany?: Enumerable<userloginScalarWhereInput>
  }

  export type leaveUncheckedUpdateManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<leaveUncheckedCreateWithoutEmployeeInput>, Enumerable<leaveCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<leaveCreateOrConnectWithoutemployeeInput>
    upsert?: Enumerable<leaveUpsertWithWhereUniqueWithoutEmployeeInput>
    connect?: Enumerable<leaveWhereUniqueInput>
    set?: Enumerable<leaveWhereUniqueInput>
    disconnect?: Enumerable<leaveWhereUniqueInput>
    delete?: Enumerable<leaveWhereUniqueInput>
    update?: Enumerable<leaveUpdateWithWhereUniqueWithoutEmployeeInput>
    updateMany?: Enumerable<leaveUpdateManyWithWhereWithoutEmployeeInput>
    deleteMany?: Enumerable<leaveScalarWhereInput>
  }

  export type userloginUncheckedUpdateManyWithoutEmpInput = {
    create?: XOR<Enumerable<userloginUncheckedCreateWithoutEmpInput>, Enumerable<userloginCreateWithoutEmpInput>>
    connectOrCreate?: Enumerable<userloginCreateOrConnectWithoutempInput>
    upsert?: Enumerable<userloginUpsertWithWhereUniqueWithoutEmpInput>
    connect?: Enumerable<userloginWhereUniqueInput>
    set?: Enumerable<userloginWhereUniqueInput>
    disconnect?: Enumerable<userloginWhereUniqueInput>
    delete?: Enumerable<userloginWhereUniqueInput>
    update?: Enumerable<userloginUpdateWithWhereUniqueWithoutEmpInput>
    updateMany?: Enumerable<userloginUpdateManyWithWhereWithoutEmpInput>
    deleteMany?: Enumerable<userloginScalarWhereInput>
  }

  export type employeeCreateNestedManyWithoutDeptInput = {
    create?: XOR<Enumerable<employeeUncheckedCreateWithoutDeptInput>, Enumerable<employeeCreateWithoutDeptInput>>
    connectOrCreate?: Enumerable<employeeCreateOrConnectWithoutdeptInput>
    connect?: Enumerable<employeeWhereUniqueInput>
  }

  export type employeeUncheckedCreateNestedManyWithoutDeptInput = {
    create?: XOR<Enumerable<employeeUncheckedCreateWithoutDeptInput>, Enumerable<employeeCreateWithoutDeptInput>>
    connectOrCreate?: Enumerable<employeeCreateOrConnectWithoutdeptInput>
    connect?: Enumerable<employeeWhereUniqueInput>
  }

  export type employeeUpdateManyWithoutDeptInput = {
    create?: XOR<Enumerable<employeeUncheckedCreateWithoutDeptInput>, Enumerable<employeeCreateWithoutDeptInput>>
    connectOrCreate?: Enumerable<employeeCreateOrConnectWithoutdeptInput>
    upsert?: Enumerable<employeeUpsertWithWhereUniqueWithoutDeptInput>
    connect?: Enumerable<employeeWhereUniqueInput>
    set?: Enumerable<employeeWhereUniqueInput>
    disconnect?: Enumerable<employeeWhereUniqueInput>
    delete?: Enumerable<employeeWhereUniqueInput>
    update?: Enumerable<employeeUpdateWithWhereUniqueWithoutDeptInput>
    updateMany?: Enumerable<employeeUpdateManyWithWhereWithoutDeptInput>
    deleteMany?: Enumerable<employeeScalarWhereInput>
  }

  export type employeeUncheckedUpdateManyWithoutDeptInput = {
    create?: XOR<Enumerable<employeeUncheckedCreateWithoutDeptInput>, Enumerable<employeeCreateWithoutDeptInput>>
    connectOrCreate?: Enumerable<employeeCreateOrConnectWithoutdeptInput>
    upsert?: Enumerable<employeeUpsertWithWhereUniqueWithoutDeptInput>
    connect?: Enumerable<employeeWhereUniqueInput>
    set?: Enumerable<employeeWhereUniqueInput>
    disconnect?: Enumerable<employeeWhereUniqueInput>
    delete?: Enumerable<employeeWhereUniqueInput>
    update?: Enumerable<employeeUpdateWithWhereUniqueWithoutDeptInput>
    updateMany?: Enumerable<employeeUpdateManyWithWhereWithoutDeptInput>
    deleteMany?: Enumerable<employeeScalarWhereInput>
  }

  export type employeeCreateNestedOneWithoutLeavehistoryInput = {
    create?: XOR<employeeUncheckedCreateWithoutLeavehistoryInput, employeeCreateWithoutLeavehistoryInput>
    connectOrCreate?: employeeCreateOrConnectWithoutleavehistoryInput
    connect?: employeeWhereUniqueInput
  }

  export type EnumLeaveTypeFieldUpdateOperationsInput = {
    set?: LeaveType
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: Status
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type employeeUpdateOneRequiredWithoutLeavehistoryInput = {
    create?: XOR<employeeUncheckedCreateWithoutLeavehistoryInput, employeeCreateWithoutLeavehistoryInput>
    connectOrCreate?: employeeCreateOrConnectWithoutleavehistoryInput
    upsert?: employeeUpsertWithoutLeavehistoryInput
    connect?: employeeWhereUniqueInput
    update?: XOR<employeeUncheckedUpdateWithoutLeavehistoryInput, employeeUpdateWithoutLeavehistoryInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumERoleFilter = {
    equals?: ERole
    in?: Enumerable<ERole>
    notIn?: Enumerable<ERole>
    not?: NestedEnumERoleFilter | ERole
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedEnumLeaveTypeFilter = {
    equals?: LeaveType
    in?: Enumerable<LeaveType>
    notIn?: Enumerable<LeaveType>
    not?: NestedEnumLeaveTypeFilter | LeaveType
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumStatusFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusFilter | Status
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type employeeCreateWithoutUserloginInput = {
    firstname: string
    lastname: string
    email: string
    mobile: string
    roledescription: string
    valid?: boolean
    dept: departmentCreateNestedOneWithoutEmployeeInput
    leavehistory?: leaveCreateNestedManyWithoutEmployeeInput
  }

  export type employeeUncheckedCreateWithoutUserloginInput = {
    id?: number
    firstname: string
    lastname: string
    email: string
    mobile: string
    roledescription: string
    valid?: boolean
    depid: number
    leavehistory?: leaveUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type employeeCreateOrConnectWithoutuserloginInput = {
    where: employeeWhereUniqueInput
    create: XOR<employeeUncheckedCreateWithoutUserloginInput, employeeCreateWithoutUserloginInput>
  }

  export type employeeUpsertWithoutUserloginInput = {
    update: XOR<employeeUncheckedUpdateWithoutUserloginInput, employeeUpdateWithoutUserloginInput>
    create: XOR<employeeUncheckedCreateWithoutUserloginInput, employeeCreateWithoutUserloginInput>
  }

  export type employeeUpdateWithoutUserloginInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roledescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    dept?: departmentUpdateOneRequiredWithoutEmployeeInput
    leavehistory?: leaveUpdateManyWithoutEmployeeInput
  }

  export type employeeUncheckedUpdateWithoutUserloginInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roledescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    depid?: IntFieldUpdateOperationsInput | number
    leavehistory?: leaveUncheckedUpdateManyWithoutEmployeeInput
  }

  export type departmentCreateWithoutEmployeeInput = {
    name: string
    manager: string
    visible?: boolean
  }

  export type departmentUncheckedCreateWithoutEmployeeInput = {
    id?: number
    name: string
    manager: string
    visible?: boolean
  }

  export type departmentCreateOrConnectWithoutemployeeInput = {
    where: departmentWhereUniqueInput
    create: XOR<departmentUncheckedCreateWithoutEmployeeInput, departmentCreateWithoutEmployeeInput>
  }

  export type leaveCreateWithoutEmployeeInput = {
    leavetype?: LeaveType
    startdate: Date | string
    enddate: Date | string
    leavedescription: string
    valid?: boolean
    leavetimestamp?: Date | string
    leavestatus?: Status
    statustimestamp?: Date | string | null
    totalleavesleft?: number
  }

  export type leaveUncheckedCreateWithoutEmployeeInput = {
    id?: number
    leavetype?: LeaveType
    startdate: Date | string
    enddate: Date | string
    leavedescription: string
    valid?: boolean
    leavetimestamp?: Date | string
    leavestatus?: Status
    statustimestamp?: Date | string | null
    totalleavesleft?: number
  }

  export type leaveCreateOrConnectWithoutemployeeInput = {
    where: leaveWhereUniqueInput
    create: XOR<leaveUncheckedCreateWithoutEmployeeInput, leaveCreateWithoutEmployeeInput>
  }

  export type userloginCreateWithoutEmpInput = {
    username: string
    password: string
    role?: ERole
  }

  export type userloginUncheckedCreateWithoutEmpInput = {
    id?: number
    username: string
    password: string
    role?: ERole
  }

  export type userloginCreateOrConnectWithoutempInput = {
    where: userloginWhereUniqueInput
    create: XOR<userloginUncheckedCreateWithoutEmpInput, userloginCreateWithoutEmpInput>
  }

  export type departmentUpsertWithoutEmployeeInput = {
    update: XOR<departmentUncheckedUpdateWithoutEmployeeInput, departmentUpdateWithoutEmployeeInput>
    create: XOR<departmentUncheckedCreateWithoutEmployeeInput, departmentCreateWithoutEmployeeInput>
  }

  export type departmentUpdateWithoutEmployeeInput = {
    name?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type departmentUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type leaveUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: leaveWhereUniqueInput
    update: XOR<leaveUncheckedUpdateWithoutEmployeeInput, leaveUpdateWithoutEmployeeInput>
    create: XOR<leaveUncheckedCreateWithoutEmployeeInput, leaveCreateWithoutEmployeeInput>
  }

  export type leaveUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: leaveWhereUniqueInput
    data: XOR<leaveUncheckedUpdateWithoutEmployeeInput, leaveUpdateWithoutEmployeeInput>
  }

  export type leaveUpdateManyWithWhereWithoutEmployeeInput = {
    where: leaveScalarWhereInput
    data: XOR<leaveUncheckedUpdateManyWithoutLeavehistoryInput, leaveUpdateManyMutationInput>
  }

  export type leaveScalarWhereInput = {
    AND?: Enumerable<leaveScalarWhereInput>
    OR?: Enumerable<leaveScalarWhereInput>
    NOT?: Enumerable<leaveScalarWhereInput>
    id?: IntFilter | number
    employeeid?: IntFilter | number
    leavetype?: EnumLeaveTypeFilter | LeaveType
    startdate?: DateTimeFilter | Date | string
    enddate?: DateTimeFilter | Date | string
    leavedescription?: StringFilter | string
    valid?: BoolFilter | boolean
    leavetimestamp?: DateTimeFilter | Date | string
    leavestatus?: EnumStatusFilter | Status
    statustimestamp?: DateTimeNullableFilter | Date | string | null
    totalleavesleft?: IntFilter | number
  }

  export type userloginUpsertWithWhereUniqueWithoutEmpInput = {
    where: userloginWhereUniqueInput
    update: XOR<userloginUncheckedUpdateWithoutEmpInput, userloginUpdateWithoutEmpInput>
    create: XOR<userloginUncheckedCreateWithoutEmpInput, userloginCreateWithoutEmpInput>
  }

  export type userloginUpdateWithWhereUniqueWithoutEmpInput = {
    where: userloginWhereUniqueInput
    data: XOR<userloginUncheckedUpdateWithoutEmpInput, userloginUpdateWithoutEmpInput>
  }

  export type userloginUpdateManyWithWhereWithoutEmpInput = {
    where: userloginScalarWhereInput
    data: XOR<userloginUncheckedUpdateManyWithoutUserloginInput, userloginUpdateManyMutationInput>
  }

  export type userloginScalarWhereInput = {
    AND?: Enumerable<userloginScalarWhereInput>
    OR?: Enumerable<userloginScalarWhereInput>
    NOT?: Enumerable<userloginScalarWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    password?: StringFilter | string
    role?: EnumERoleFilter | ERole
    empid?: IntFilter | number
  }

  export type employeeCreateWithoutDeptInput = {
    firstname: string
    lastname: string
    email: string
    mobile: string
    roledescription: string
    valid?: boolean
    leavehistory?: leaveCreateNestedManyWithoutEmployeeInput
    userlogin?: userloginCreateNestedManyWithoutEmpInput
  }

  export type employeeUncheckedCreateWithoutDeptInput = {
    id?: number
    firstname: string
    lastname: string
    email: string
    mobile: string
    roledescription: string
    valid?: boolean
    leavehistory?: leaveUncheckedCreateNestedManyWithoutEmployeeInput
    userlogin?: userloginUncheckedCreateNestedManyWithoutEmpInput
  }

  export type employeeCreateOrConnectWithoutdeptInput = {
    where: employeeWhereUniqueInput
    create: XOR<employeeUncheckedCreateWithoutDeptInput, employeeCreateWithoutDeptInput>
  }

  export type employeeUpsertWithWhereUniqueWithoutDeptInput = {
    where: employeeWhereUniqueInput
    update: XOR<employeeUncheckedUpdateWithoutDeptInput, employeeUpdateWithoutDeptInput>
    create: XOR<employeeUncheckedCreateWithoutDeptInput, employeeCreateWithoutDeptInput>
  }

  export type employeeUpdateWithWhereUniqueWithoutDeptInput = {
    where: employeeWhereUniqueInput
    data: XOR<employeeUncheckedUpdateWithoutDeptInput, employeeUpdateWithoutDeptInput>
  }

  export type employeeUpdateManyWithWhereWithoutDeptInput = {
    where: employeeScalarWhereInput
    data: XOR<employeeUncheckedUpdateManyWithoutEmployeeInput, employeeUpdateManyMutationInput>
  }

  export type employeeScalarWhereInput = {
    AND?: Enumerable<employeeScalarWhereInput>
    OR?: Enumerable<employeeScalarWhereInput>
    NOT?: Enumerable<employeeScalarWhereInput>
    id?: IntFilter | number
    firstname?: StringFilter | string
    lastname?: StringFilter | string
    email?: StringFilter | string
    mobile?: StringFilter | string
    roledescription?: StringFilter | string
    valid?: BoolFilter | boolean
    depid?: IntFilter | number
  }

  export type employeeCreateWithoutLeavehistoryInput = {
    firstname: string
    lastname: string
    email: string
    mobile: string
    roledescription: string
    valid?: boolean
    dept: departmentCreateNestedOneWithoutEmployeeInput
    userlogin?: userloginCreateNestedManyWithoutEmpInput
  }

  export type employeeUncheckedCreateWithoutLeavehistoryInput = {
    id?: number
    firstname: string
    lastname: string
    email: string
    mobile: string
    roledescription: string
    valid?: boolean
    depid: number
    userlogin?: userloginUncheckedCreateNestedManyWithoutEmpInput
  }

  export type employeeCreateOrConnectWithoutleavehistoryInput = {
    where: employeeWhereUniqueInput
    create: XOR<employeeUncheckedCreateWithoutLeavehistoryInput, employeeCreateWithoutLeavehistoryInput>
  }

  export type employeeUpsertWithoutLeavehistoryInput = {
    update: XOR<employeeUncheckedUpdateWithoutLeavehistoryInput, employeeUpdateWithoutLeavehistoryInput>
    create: XOR<employeeUncheckedCreateWithoutLeavehistoryInput, employeeCreateWithoutLeavehistoryInput>
  }

  export type employeeUpdateWithoutLeavehistoryInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roledescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    dept?: departmentUpdateOneRequiredWithoutEmployeeInput
    userlogin?: userloginUpdateManyWithoutEmpInput
  }

  export type employeeUncheckedUpdateWithoutLeavehistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roledescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    depid?: IntFieldUpdateOperationsInput | number
    userlogin?: userloginUncheckedUpdateManyWithoutEmpInput
  }

  export type leaveUpdateWithoutEmployeeInput = {
    leavetype?: EnumLeaveTypeFieldUpdateOperationsInput | LeaveType
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavedescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leavetimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    leavestatus?: EnumStatusFieldUpdateOperationsInput | Status
    statustimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalleavesleft?: IntFieldUpdateOperationsInput | number
  }

  export type leaveUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    leavetype?: EnumLeaveTypeFieldUpdateOperationsInput | LeaveType
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavedescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leavetimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    leavestatus?: EnumStatusFieldUpdateOperationsInput | Status
    statustimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalleavesleft?: IntFieldUpdateOperationsInput | number
  }

  export type leaveUncheckedUpdateManyWithoutLeavehistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    leavetype?: EnumLeaveTypeFieldUpdateOperationsInput | LeaveType
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavedescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leavetimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    leavestatus?: EnumStatusFieldUpdateOperationsInput | Status
    statustimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalleavesleft?: IntFieldUpdateOperationsInput | number
  }

  export type userloginUpdateWithoutEmpInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumERoleFieldUpdateOperationsInput | ERole
  }

  export type userloginUncheckedUpdateWithoutEmpInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumERoleFieldUpdateOperationsInput | ERole
  }

  export type userloginUncheckedUpdateManyWithoutUserloginInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumERoleFieldUpdateOperationsInput | ERole
  }

  export type employeeUpdateWithoutDeptInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roledescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leavehistory?: leaveUpdateManyWithoutEmployeeInput
    userlogin?: userloginUpdateManyWithoutEmpInput
  }

  export type employeeUncheckedUpdateWithoutDeptInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roledescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
    leavehistory?: leaveUncheckedUpdateManyWithoutEmployeeInput
    userlogin?: userloginUncheckedUpdateManyWithoutEmpInput
  }

  export type employeeUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    roledescription?: StringFieldUpdateOperationsInput | string
    valid?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}