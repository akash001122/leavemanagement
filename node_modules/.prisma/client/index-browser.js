
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.16.1
 * Query Engine version: 8b74ad57aaf2cc6c155f382a18a8e3ba95aceb03
 */
Prisma.prismaVersion = {
  client: "2.16.1",
  engine: "8b74ad57aaf2cc6c155f382a18a8e3ba95aceb03"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserloginScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  password: 'password',
  role: 'role',
  empid: 'empid'
});

exports.Prisma.EmployeeScalarFieldEnum = makeEnum({
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  email: 'email',
  mobile: 'mobile',
  roledescription: 'roledescription',
  valid: 'valid',
  depid: 'depid'
});

exports.Prisma.DepartmentScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  manager: 'manager',
  visible: 'visible'
});

exports.Prisma.LeaveScalarFieldEnum = makeEnum({
  id: 'id',
  employeeid: 'employeeid',
  leavetype: 'leavetype',
  startdate: 'startdate',
  enddate: 'enddate',
  leavedescription: 'leavedescription',
  valid: 'valid',
  leavetimestamp: 'leavetimestamp',
  leavestatus: 'leavestatus',
  statustimestamp: 'statustimestamp',
  totalleavesleft: 'totalleavesleft'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.ERole = makeEnum({
  HR: 'HR',
  MANAGER: 'MANAGER',
  EMPLOYEE: 'EMPLOYEE'
});

exports.LeaveType = makeEnum({
  SICK: 'SICK',
  PAID: 'PAID',
  COMPLIMENTARY: 'COMPLIMENTARY',
  LOP: 'LOP',
  EMERGENCY: 'EMERGENCY',
  OTHERS: 'OTHERS'
});

exports.Status = makeEnum({
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
});

exports.Prisma.ModelName = makeEnum({
  userlogin: 'userlogin',
  employee: 'employee',
  department: 'department',
  leave: 'leave'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma-client-js/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
